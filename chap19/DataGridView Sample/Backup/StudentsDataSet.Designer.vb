'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50215.44
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("StudentsDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet"),  _
 System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")>  _
Partial Public Class StudentsDataSet
    Inherits System.Data.DataSet
    
    Private tableAssignments As AssignmentsDataTable
    
    Private tableClasses As ClassesDataTable
    
    Private tableDepartments As DepartmentsDataTable
    
    Private tableInstructors As InstructorsDataTable
    
    Private tableResults As ResultsDataTable
    
    Private tableStudents As StudentsDataTable
    
    Private tableStudents_And_Classes As Students_And_ClassesDataTable
    
    Private tableSwitchboard_Items As Switchboard_ItemsDataTable
    
    Private relationReference3 As System.Data.DataRelation
    
    Private relationReference5 As System.Data.DataRelation
    
    Private relationReference6 As System.Data.DataRelation
    
    Private relationReference4 As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Assignments")) Is Nothing) Then
                MyBase.Tables.Add(New AssignmentsDataTable(ds.Tables("Assignments")))
            End If
            If (Not (ds.Tables("Classes")) Is Nothing) Then
                MyBase.Tables.Add(New ClassesDataTable(ds.Tables("Classes")))
            End If
            If (Not (ds.Tables("Departments")) Is Nothing) Then
                MyBase.Tables.Add(New DepartmentsDataTable(ds.Tables("Departments")))
            End If
            If (Not (ds.Tables("Instructors")) Is Nothing) Then
                MyBase.Tables.Add(New InstructorsDataTable(ds.Tables("Instructors")))
            End If
            If (Not (ds.Tables("Results")) Is Nothing) Then
                MyBase.Tables.Add(New ResultsDataTable(ds.Tables("Results")))
            End If
            If (Not (ds.Tables("Students")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsDataTable(ds.Tables("Students")))
            End If
            If (Not (ds.Tables("Students And Classes")) Is Nothing) Then
                MyBase.Tables.Add(New Students_And_ClassesDataTable(ds.Tables("Students And Classes")))
            End If
            If (Not (ds.Tables("Switchboard Items")) Is Nothing) Then
                MyBase.Tables.Add(New Switchboard_ItemsDataTable(ds.Tables("Switchboard Items")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Assignments() As AssignmentsDataTable
        Get
            Return Me.tableAssignments
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Classes() As ClassesDataTable
        Get
            Return Me.tableClasses
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Departments() As DepartmentsDataTable
        Get
            Return Me.tableDepartments
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Instructors() As InstructorsDataTable
        Get
            Return Me.tableInstructors
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Results() As ResultsDataTable
        Get
            Return Me.tableResults
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Students() As StudentsDataTable
        Get
            Return Me.tableStudents
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Students_And_Classes() As Students_And_ClassesDataTable
        Get
            Return Me.tableStudents_And_Classes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Switchboard_Items() As Switchboard_ItemsDataTable
        Get
            Return Me.tableSwitchboard_Items
        End Get
    End Property
    
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(true)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As StudentsDataSet = CType(MyBase.Clone,StudentsDataSet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Assignments")) Is Nothing) Then
                MyBase.Tables.Add(New AssignmentsDataTable(ds.Tables("Assignments")))
            End If
            If (Not (ds.Tables("Classes")) Is Nothing) Then
                MyBase.Tables.Add(New ClassesDataTable(ds.Tables("Classes")))
            End If
            If (Not (ds.Tables("Departments")) Is Nothing) Then
                MyBase.Tables.Add(New DepartmentsDataTable(ds.Tables("Departments")))
            End If
            If (Not (ds.Tables("Instructors")) Is Nothing) Then
                MyBase.Tables.Add(New InstructorsDataTable(ds.Tables("Instructors")))
            End If
            If (Not (ds.Tables("Results")) Is Nothing) Then
                MyBase.Tables.Add(New ResultsDataTable(ds.Tables("Results")))
            End If
            If (Not (ds.Tables("Students")) Is Nothing) Then
                MyBase.Tables.Add(New StudentsDataTable(ds.Tables("Students")))
            End If
            If (Not (ds.Tables("Students And Classes")) Is Nothing) Then
                MyBase.Tables.Add(New Students_And_ClassesDataTable(ds.Tables("Students And Classes")))
            End If
            If (Not (ds.Tables("Switchboard Items")) Is Nothing) Then
                MyBase.Tables.Add(New Switchboard_ItemsDataTable(ds.Tables("Switchboard Items")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAssignments = CType(MyBase.Tables("Assignments"),AssignmentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssignments) Is Nothing) Then
                Me.tableAssignments.InitVars
            End If
        End If
        Me.tableClasses = CType(MyBase.Tables("Classes"),ClassesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClasses) Is Nothing) Then
                Me.tableClasses.InitVars
            End If
        End If
        Me.tableDepartments = CType(MyBase.Tables("Departments"),DepartmentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDepartments) Is Nothing) Then
                Me.tableDepartments.InitVars
            End If
        End If
        Me.tableInstructors = CType(MyBase.Tables("Instructors"),InstructorsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableInstructors) Is Nothing) Then
                Me.tableInstructors.InitVars
            End If
        End If
        Me.tableResults = CType(MyBase.Tables("Results"),ResultsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableResults) Is Nothing) Then
                Me.tableResults.InitVars
            End If
        End If
        Me.tableStudents = CType(MyBase.Tables("Students"),StudentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudents) Is Nothing) Then
                Me.tableStudents.InitVars
            End If
        End If
        Me.tableStudents_And_Classes = CType(MyBase.Tables("Students And Classes"),Students_And_ClassesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudents_And_Classes) Is Nothing) Then
                Me.tableStudents_And_Classes.InitVars
            End If
        End If
        Me.tableSwitchboard_Items = CType(MyBase.Tables("Switchboard Items"),Switchboard_ItemsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSwitchboard_Items) Is Nothing) Then
                Me.tableSwitchboard_Items.InitVars
            End If
        End If
        Me.relationReference3 = Me.Relations("Reference3")
        Me.relationReference5 = Me.Relations("Reference5")
        Me.relationReference6 = Me.Relations("Reference6")
        Me.relationReference4 = Me.Relations("Reference4")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "StudentsDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/StudentsDataSet.xsd"
        Me.EnforceConstraints = true
        Me.tableAssignments = New AssignmentsDataTable
        MyBase.Tables.Add(Me.tableAssignments)
        Me.tableClasses = New ClassesDataTable
        MyBase.Tables.Add(Me.tableClasses)
        Me.tableDepartments = New DepartmentsDataTable
        MyBase.Tables.Add(Me.tableDepartments)
        Me.tableInstructors = New InstructorsDataTable
        MyBase.Tables.Add(Me.tableInstructors)
        Me.tableResults = New ResultsDataTable
        MyBase.Tables.Add(Me.tableResults)
        Me.tableStudents = New StudentsDataTable
        MyBase.Tables.Add(Me.tableStudents)
        Me.tableStudents_And_Classes = New Students_And_ClassesDataTable
        MyBase.Tables.Add(Me.tableStudents_And_Classes)
        Me.tableSwitchboard_Items = New Switchboard_ItemsDataTable
        MyBase.Tables.Add(Me.tableSwitchboard_Items)
        Me.relationReference3 = New System.Data.DataRelation("Reference3", New System.Data.DataColumn() {Me.tableClasses.ClassIDColumn}, New System.Data.DataColumn() {Me.tableAssignments.ClassIDColumn}, false)
        Me.Relations.Add(Me.relationReference3)
        Me.relationReference5 = New System.Data.DataRelation("Reference5", New System.Data.DataColumn() {Me.tableStudents.StudentIDColumn}, New System.Data.DataColumn() {Me.tableResults.StudentIDColumn}, false)
        Me.Relations.Add(Me.relationReference5)
        Me.relationReference6 = New System.Data.DataRelation("Reference6", New System.Data.DataColumn() {Me.tableAssignments.AssignmentIDColumn}, New System.Data.DataColumn() {Me.tableResults.AssignmentIDColumn}, false)
        Me.Relations.Add(Me.relationReference6)
        Me.relationReference4 = New System.Data.DataRelation("Reference4", New System.Data.DataColumn() {Me.tableStudents.StudentIDColumn}, New System.Data.DataColumn() {Me.tableStudents_And_Classes.StudentIDColumn}, false)
        Me.Relations.Add(Me.relationReference4)
    End Sub
    
    Private Function ShouldSerializeAssignments() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeClasses() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDepartments() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInstructors() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeResults() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStudents() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStudents_And_Classes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSwitchboard_Items() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As StudentsDataSet = New StudentsDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub AssignmentsRowChangeEventHandler(ByVal sender As Object, ByVal e As AssignmentsRowChangeEvent)
    
    Public Delegate Sub ClassesRowChangeEventHandler(ByVal sender As Object, ByVal e As ClassesRowChangeEvent)
    
    Public Delegate Sub DepartmentsRowChangeEventHandler(ByVal sender As Object, ByVal e As DepartmentsRowChangeEvent)
    
    Public Delegate Sub InstructorsRowChangeEventHandler(ByVal sender As Object, ByVal e As InstructorsRowChangeEvent)
    
    Public Delegate Sub ResultsRowChangeEventHandler(ByVal sender As Object, ByVal e As ResultsRowChangeEvent)
    
    Public Delegate Sub StudentsRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentsRowChangeEvent)
    
    Public Delegate Sub Students_And_ClassesRowChangeEventHandler(ByVal sender As Object, ByVal e As Students_And_ClassesRowChangeEvent)
    
    Public Delegate Sub Switchboard_ItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As Switchboard_ItemsRowChangeEvent)
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssignmentsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAssignmentID As System.Data.DataColumn
        
        Private columnAssignmentDescription As System.Data.DataColumn
        
        Private columnClassID As System.Data.DataColumn
        
        Private columnExam As System.Data.DataColumn
        
        Private columnPercentOfGrade As System.Data.DataColumn
        
        Private columnMaximumPoints As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Assignments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property AssignmentIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssignmentID
            End Get
        End Property
        
        Public ReadOnly Property AssignmentDescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssignmentDescription
            End Get
        End Property
        
        Public ReadOnly Property ClassIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnClassID
            End Get
        End Property
        
        Public ReadOnly Property ExamColumn() As System.Data.DataColumn
            Get
                Return Me.columnExam
            End Get
        End Property
        
        Public ReadOnly Property PercentOfGradeColumn() As System.Data.DataColumn
            Get
                Return Me.columnPercentOfGrade
            End Get
        End Property
        
        Public ReadOnly Property MaximumPointsColumn() As System.Data.DataColumn
            Get
                Return Me.columnMaximumPoints
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssignmentsRow
            Get
                Return CType(Me.Rows(index),AssignmentsRow)
            End Get
        End Property
        
        Public Event AssignmentsRowChanged As AssignmentsRowChangeEventHandler
        
        Public Event AssignmentsRowChanging As AssignmentsRowChangeEventHandler
        
        Public Event AssignmentsRowDeleted As AssignmentsRowChangeEventHandler
        
        Public Event AssignmentsRowDeleting As AssignmentsRowChangeEventHandler
        
        Public Overloads Sub AddAssignmentsRow(ByVal row As AssignmentsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAssignmentsRow(ByVal AssignmentDescription As String, ByVal parentClassesRowByReference3 As ClassesRow, ByVal Exam As Boolean, ByVal PercentOfGrade As Double, ByVal MaximumPoints As Single) As AssignmentsRow
            Dim rowAssignmentsRow As AssignmentsRow = CType(Me.NewRow,AssignmentsRow)
            rowAssignmentsRow.ItemArray = New Object() {Nothing, AssignmentDescription, parentClassesRowByReference3(0), Exam, PercentOfGrade, MaximumPoints}
            Me.Rows.Add(rowAssignmentsRow)
            Return rowAssignmentsRow
        End Function
        
        Public Function FindByAssignmentID(ByVal AssignmentID As Integer) As AssignmentsRow
            Return CType(Me.Rows.Find(New Object() {AssignmentID}),AssignmentsRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AssignmentsDataTable = CType(MyBase.Clone,AssignmentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AssignmentsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAssignmentID = MyBase.Columns("AssignmentID")
            Me.columnAssignmentDescription = MyBase.Columns("AssignmentDescription")
            Me.columnClassID = MyBase.Columns("ClassID")
            Me.columnExam = MyBase.Columns("Exam")
            Me.columnPercentOfGrade = MyBase.Columns("PercentOfGrade")
            Me.columnMaximumPoints = MyBase.Columns("MaximumPoints")
        End Sub
        
        Private Sub InitClass()
            Me.columnAssignmentID = New System.Data.DataColumn("AssignmentID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignmentID)
            Me.columnAssignmentDescription = New System.Data.DataColumn("AssignmentDescription", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignmentDescription)
            Me.columnClassID = New System.Data.DataColumn("ClassID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassID)
            Me.columnExam = New System.Data.DataColumn("Exam", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExam)
            Me.columnPercentOfGrade = New System.Data.DataColumn("PercentOfGrade", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPercentOfGrade)
            Me.columnMaximumPoints = New System.Data.DataColumn("MaximumPoints", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaximumPoints)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnAssignmentID}, true))
            Me.columnAssignmentID.AutoIncrement = true
            Me.columnAssignmentID.AllowDBNull = false
            Me.columnAssignmentID.Unique = true
            Me.columnAssignmentDescription.MaxLength = 255
        End Sub
        
        Public Function NewAssignmentsRow() As AssignmentsRow
            Return CType(Me.NewRow,AssignmentsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AssignmentsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssignmentsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssignmentsRowChangedEvent) Is Nothing) Then
                RaiseEvent AssignmentsRowChanged(Me, New AssignmentsRowChangeEvent(CType(e.Row,AssignmentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssignmentsRowChangingEvent) Is Nothing) Then
                RaiseEvent AssignmentsRowChanging(Me, New AssignmentsRowChangeEvent(CType(e.Row,AssignmentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssignmentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssignmentsRowDeleted(Me, New AssignmentsRowChangeEvent(CType(e.Row,AssignmentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssignmentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssignmentsRowDeleting(Me, New AssignmentsRowChangeEvent(CType(e.Row,AssignmentsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAssignmentsRow(ByVal row As AssignmentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As StudentsDataSet = New StudentsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssignmentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClassesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnClassID As System.Data.DataColumn
        
        Private columnClassName As System.Data.DataColumn
        
        Private columnDepartment As System.Data.DataColumn
        
        Private columnProf As System.Data.DataColumn
        
        Private columnSectionNumber As System.Data.DataColumn
        
        Private columnTerm As System.Data.DataColumn
        
        Private columnUnits As System.Data.DataColumn
        
        Private columnYear As System.Data.DataColumn
        
        Private columnLocation As System.Data.DataColumn
        
        Private columnDaysAndTimes As System.Data.DataColumn
        
        Private columnNotes As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Classes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property ClassIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnClassID
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property DepartmentColumn() As System.Data.DataColumn
            Get
                Return Me.columnDepartment
            End Get
        End Property
        
        Public ReadOnly Property ProfColumn() As System.Data.DataColumn
            Get
                Return Me.columnProf
            End Get
        End Property
        
        Public ReadOnly Property SectionNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnSectionNumber
            End Get
        End Property
        
        Public ReadOnly Property TermColumn() As System.Data.DataColumn
            Get
                Return Me.columnTerm
            End Get
        End Property
        
        Public ReadOnly Property UnitsColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnits
            End Get
        End Property
        
        Public ReadOnly Property YearColumn() As System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        Public ReadOnly Property LocationColumn() As System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        Public ReadOnly Property DaysAndTimesColumn() As System.Data.DataColumn
            Get
                Return Me.columnDaysAndTimes
            End Get
        End Property
        
        Public ReadOnly Property NotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClassesRow
            Get
                Return CType(Me.Rows(index),ClassesRow)
            End Get
        End Property
        
        Public Event ClassesRowChanged As ClassesRowChangeEventHandler
        
        Public Event ClassesRowChanging As ClassesRowChangeEventHandler
        
        Public Event ClassesRowDeleted As ClassesRowChangeEventHandler
        
        Public Event ClassesRowDeleting As ClassesRowChangeEventHandler
        
        Public Overloads Sub AddClassesRow(ByVal row As ClassesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddClassesRow(ByVal ClassName As String, ByVal Department As String, ByVal Prof As String, ByVal SectionNumber As Short, ByVal Term As String, ByVal Units As String, ByVal Year As Short, ByVal Location As String, ByVal DaysAndTimes As String, ByVal Notes As String) As ClassesRow
            Dim rowClassesRow As ClassesRow = CType(Me.NewRow,ClassesRow)
            rowClassesRow.ItemArray = New Object() {Nothing, ClassName, Department, Prof, SectionNumber, Term, Units, Year, Location, DaysAndTimes, Notes}
            Me.Rows.Add(rowClassesRow)
            Return rowClassesRow
        End Function
        
        Public Function FindByClassID(ByVal ClassID As Integer) As ClassesRow
            Return CType(Me.Rows.Find(New Object() {ClassID}),ClassesRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ClassesDataTable = CType(MyBase.Clone,ClassesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ClassesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnClassID = MyBase.Columns("ClassID")
            Me.columnClassName = MyBase.Columns("ClassName")
            Me.columnDepartment = MyBase.Columns("Department")
            Me.columnProf = MyBase.Columns("Prof")
            Me.columnSectionNumber = MyBase.Columns("SectionNumber")
            Me.columnTerm = MyBase.Columns("Term")
            Me.columnUnits = MyBase.Columns("Units")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnDaysAndTimes = MyBase.Columns("DaysAndTimes")
            Me.columnNotes = MyBase.Columns("Notes")
        End Sub
        
        Private Sub InitClass()
            Me.columnClassID = New System.Data.DataColumn("ClassID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassID)
            Me.columnClassName = New System.Data.DataColumn("ClassName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassName)
            Me.columnDepartment = New System.Data.DataColumn("Department", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartment)
            Me.columnProf = New System.Data.DataColumn("Prof", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProf)
            Me.columnSectionNumber = New System.Data.DataColumn("SectionNumber", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSectionNumber)
            Me.columnTerm = New System.Data.DataColumn("Term", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerm)
            Me.columnUnits = New System.Data.DataColumn("Units", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnits)
            Me.columnYear = New System.Data.DataColumn("Year", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnLocation = New System.Data.DataColumn("Location", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnDaysAndTimes = New System.Data.DataColumn("DaysAndTimes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDaysAndTimes)
            Me.columnNotes = New System.Data.DataColumn("Notes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnClassID}, true))
            Me.columnClassID.AutoIncrement = true
            Me.columnClassID.AllowDBNull = false
            Me.columnClassID.Unique = true
            Me.columnClassName.MaxLength = 50
            Me.columnDepartment.MaxLength = 50
            Me.columnProf.MaxLength = 50
            Me.columnTerm.MaxLength = 30
            Me.columnUnits.MaxLength = 30
            Me.columnLocation.MaxLength = 255
            Me.columnDaysAndTimes.MaxLength = 20
            Me.columnNotes.MaxLength = 536870910
        End Sub
        
        Public Function NewClassesRow() As ClassesRow
            Return CType(Me.NewRow,ClassesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ClassesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClassesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClassesRowChangedEvent) Is Nothing) Then
                RaiseEvent ClassesRowChanged(Me, New ClassesRowChangeEvent(CType(e.Row,ClassesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClassesRowChangingEvent) Is Nothing) Then
                RaiseEvent ClassesRowChanging(Me, New ClassesRowChangeEvent(CType(e.Row,ClassesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClassesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClassesRowDeleted(Me, New ClassesRowChangeEvent(CType(e.Row,ClassesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClassesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClassesRowDeleting(Me, New ClassesRowChangeEvent(CType(e.Row,ClassesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveClassesRow(ByVal row As ClassesRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As StudentsDataSet = New StudentsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClassesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DepartmentsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDepartmentID As System.Data.DataColumn
        
        Private columnDepartmentName As System.Data.DataColumn
        
        Private columnDepartmentNumber As System.Data.DataColumn
        
        Private columnDepartmentManager As System.Data.DataColumn
        
        Private columnDepartmentChairperson As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Departments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property DepartmentIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnDepartmentID
            End Get
        End Property
        
        Public ReadOnly Property DepartmentNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnDepartmentName
            End Get
        End Property
        
        Public ReadOnly Property DepartmentNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnDepartmentNumber
            End Get
        End Property
        
        Public ReadOnly Property DepartmentManagerColumn() As System.Data.DataColumn
            Get
                Return Me.columnDepartmentManager
            End Get
        End Property
        
        Public ReadOnly Property DepartmentChairpersonColumn() As System.Data.DataColumn
            Get
                Return Me.columnDepartmentChairperson
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DepartmentsRow
            Get
                Return CType(Me.Rows(index),DepartmentsRow)
            End Get
        End Property
        
        Public Event DepartmentsRowChanged As DepartmentsRowChangeEventHandler
        
        Public Event DepartmentsRowChanging As DepartmentsRowChangeEventHandler
        
        Public Event DepartmentsRowDeleted As DepartmentsRowChangeEventHandler
        
        Public Event DepartmentsRowDeleting As DepartmentsRowChangeEventHandler
        
        Public Overloads Sub AddDepartmentsRow(ByVal row As DepartmentsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDepartmentsRow(ByVal DepartmentName As String, ByVal DepartmentNumber As Integer, ByVal DepartmentManager As String, ByVal DepartmentChairperson As String) As DepartmentsRow
            Dim rowDepartmentsRow As DepartmentsRow = CType(Me.NewRow,DepartmentsRow)
            rowDepartmentsRow.ItemArray = New Object() {Nothing, DepartmentName, DepartmentNumber, DepartmentManager, DepartmentChairperson}
            Me.Rows.Add(rowDepartmentsRow)
            Return rowDepartmentsRow
        End Function
        
        Public Function FindByDepartmentID(ByVal DepartmentID As Integer) As DepartmentsRow
            Return CType(Me.Rows.Find(New Object() {DepartmentID}),DepartmentsRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DepartmentsDataTable = CType(MyBase.Clone,DepartmentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DepartmentsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDepartmentID = MyBase.Columns("DepartmentID")
            Me.columnDepartmentName = MyBase.Columns("DepartmentName")
            Me.columnDepartmentNumber = MyBase.Columns("DepartmentNumber")
            Me.columnDepartmentManager = MyBase.Columns("DepartmentManager")
            Me.columnDepartmentChairperson = MyBase.Columns("DepartmentChairperson")
        End Sub
        
        Private Sub InitClass()
            Me.columnDepartmentID = New System.Data.DataColumn("DepartmentID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartmentID)
            Me.columnDepartmentName = New System.Data.DataColumn("DepartmentName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartmentName)
            Me.columnDepartmentNumber = New System.Data.DataColumn("DepartmentNumber", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartmentNumber)
            Me.columnDepartmentManager = New System.Data.DataColumn("DepartmentManager", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartmentManager)
            Me.columnDepartmentChairperson = New System.Data.DataColumn("DepartmentChairperson", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartmentChairperson)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnDepartmentID}, true))
            Me.columnDepartmentID.AutoIncrement = true
            Me.columnDepartmentID.AllowDBNull = false
            Me.columnDepartmentID.Unique = true
            Me.columnDepartmentName.MaxLength = 50
            Me.columnDepartmentManager.MaxLength = 30
            Me.columnDepartmentChairperson.MaxLength = 50
        End Sub
        
        Public Function NewDepartmentsRow() As DepartmentsRow
            Return CType(Me.NewRow,DepartmentsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DepartmentsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DepartmentsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DepartmentsRowChangedEvent) Is Nothing) Then
                RaiseEvent DepartmentsRowChanged(Me, New DepartmentsRowChangeEvent(CType(e.Row,DepartmentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DepartmentsRowChangingEvent) Is Nothing) Then
                RaiseEvent DepartmentsRowChanging(Me, New DepartmentsRowChangeEvent(CType(e.Row,DepartmentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DepartmentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent DepartmentsRowDeleted(Me, New DepartmentsRowChangeEvent(CType(e.Row,DepartmentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DepartmentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent DepartmentsRowDeleting(Me, New DepartmentsRowChangeEvent(CType(e.Row,DepartmentsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDepartmentsRow(ByVal row As DepartmentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As StudentsDataSet = New StudentsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DepartmentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class InstructorsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInstructorID As System.Data.DataColumn
        
        Private columnInstructor As System.Data.DataColumn
        
        Private columnPhoneNumber As System.Data.DataColumn
        
        Private columnExtension As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Instructors"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property InstructorIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnInstructorID
            End Get
        End Property
        
        Public ReadOnly Property InstructorColumn() As System.Data.DataColumn
            Get
                Return Me.columnInstructor
            End Get
        End Property
        
        Public ReadOnly Property PhoneNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhoneNumber
            End Get
        End Property
        
        Public ReadOnly Property ExtensionColumn() As System.Data.DataColumn
            Get
                Return Me.columnExtension
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As InstructorsRow
            Get
                Return CType(Me.Rows(index),InstructorsRow)
            End Get
        End Property
        
        Public Event InstructorsRowChanged As InstructorsRowChangeEventHandler
        
        Public Event InstructorsRowChanging As InstructorsRowChangeEventHandler
        
        Public Event InstructorsRowDeleted As InstructorsRowChangeEventHandler
        
        Public Event InstructorsRowDeleting As InstructorsRowChangeEventHandler
        
        Public Overloads Sub AddInstructorsRow(ByVal row As InstructorsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInstructorsRow(ByVal Instructor As String, ByVal PhoneNumber As String, ByVal Extension As String) As InstructorsRow
            Dim rowInstructorsRow As InstructorsRow = CType(Me.NewRow,InstructorsRow)
            rowInstructorsRow.ItemArray = New Object() {Nothing, Instructor, PhoneNumber, Extension}
            Me.Rows.Add(rowInstructorsRow)
            Return rowInstructorsRow
        End Function
        
        Public Function FindByInstructorID(ByVal InstructorID As Integer) As InstructorsRow
            Return CType(Me.Rows.Find(New Object() {InstructorID}),InstructorsRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As InstructorsDataTable = CType(MyBase.Clone,InstructorsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New InstructorsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInstructorID = MyBase.Columns("InstructorID")
            Me.columnInstructor = MyBase.Columns("Instructor")
            Me.columnPhoneNumber = MyBase.Columns("PhoneNumber")
            Me.columnExtension = MyBase.Columns("Extension")
        End Sub
        
        Private Sub InitClass()
            Me.columnInstructorID = New System.Data.DataColumn("InstructorID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructorID)
            Me.columnInstructor = New System.Data.DataColumn("Instructor", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstructor)
            Me.columnPhoneNumber = New System.Data.DataColumn("PhoneNumber", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhoneNumber)
            Me.columnExtension = New System.Data.DataColumn("Extension", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExtension)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnInstructorID}, true))
            Me.columnInstructorID.AutoIncrement = true
            Me.columnInstructorID.AllowDBNull = false
            Me.columnInstructorID.Unique = true
            Me.columnInstructor.MaxLength = 50
            Me.columnPhoneNumber.MaxLength = 30
            Me.columnExtension.MaxLength = 30
        End Sub
        
        Public Function NewInstructorsRow() As InstructorsRow
            Return CType(Me.NewRow,InstructorsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New InstructorsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(InstructorsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InstructorsRowChangedEvent) Is Nothing) Then
                RaiseEvent InstructorsRowChanged(Me, New InstructorsRowChangeEvent(CType(e.Row,InstructorsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InstructorsRowChangingEvent) Is Nothing) Then
                RaiseEvent InstructorsRowChanging(Me, New InstructorsRowChangeEvent(CType(e.Row,InstructorsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InstructorsRowDeletedEvent) Is Nothing) Then
                RaiseEvent InstructorsRowDeleted(Me, New InstructorsRowChangeEvent(CType(e.Row,InstructorsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InstructorsRowDeletingEvent) Is Nothing) Then
                RaiseEvent InstructorsRowDeleting(Me, New InstructorsRowChangeEvent(CType(e.Row,InstructorsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInstructorsRow(ByVal row As InstructorsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As StudentsDataSet = New StudentsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "InstructorsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ResultsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnResultsID As System.Data.DataColumn
        
        Private columnStudentID As System.Data.DataColumn
        
        Private columnAssignmentID As System.Data.DataColumn
        
        Private columnScore As System.Data.DataColumn
        
        Private columnLate As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Results"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property ResultsIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnResultsID
            End Get
        End Property
        
        Public ReadOnly Property StudentIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        Public ReadOnly Property AssignmentIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssignmentID
            End Get
        End Property
        
        Public ReadOnly Property ScoreColumn() As System.Data.DataColumn
            Get
                Return Me.columnScore
            End Get
        End Property
        
        Public ReadOnly Property LateColumn() As System.Data.DataColumn
            Get
                Return Me.columnLate
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ResultsRow
            Get
                Return CType(Me.Rows(index),ResultsRow)
            End Get
        End Property
        
        Public Event ResultsRowChanged As ResultsRowChangeEventHandler
        
        Public Event ResultsRowChanging As ResultsRowChangeEventHandler
        
        Public Event ResultsRowDeleted As ResultsRowChangeEventHandler
        
        Public Event ResultsRowDeleting As ResultsRowChangeEventHandler
        
        Public Overloads Sub AddResultsRow(ByVal row As ResultsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddResultsRow(ByVal parentStudentsRowByReference5 As StudentsRow, ByVal parentAssignmentsRowByReference6 As AssignmentsRow, ByVal Score As Double, ByVal Late As Boolean) As ResultsRow
            Dim rowResultsRow As ResultsRow = CType(Me.NewRow,ResultsRow)
            rowResultsRow.ItemArray = New Object() {Nothing, parentStudentsRowByReference5(0), parentAssignmentsRowByReference6(0), Score, Late}
            Me.Rows.Add(rowResultsRow)
            Return rowResultsRow
        End Function
        
        Public Function FindByResultsID(ByVal ResultsID As Integer) As ResultsRow
            Return CType(Me.Rows.Find(New Object() {ResultsID}),ResultsRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ResultsDataTable = CType(MyBase.Clone,ResultsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ResultsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnResultsID = MyBase.Columns("ResultsID")
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnAssignmentID = MyBase.Columns("AssignmentID")
            Me.columnScore = MyBase.Columns("Score")
            Me.columnLate = MyBase.Columns("Late")
        End Sub
        
        Private Sub InitClass()
            Me.columnResultsID = New System.Data.DataColumn("ResultsID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResultsID)
            Me.columnStudentID = New System.Data.DataColumn("StudentID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnAssignmentID = New System.Data.DataColumn("AssignmentID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignmentID)
            Me.columnScore = New System.Data.DataColumn("Score", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScore)
            Me.columnLate = New System.Data.DataColumn("Late", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLate)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnResultsID}, true))
            Me.columnResultsID.AutoIncrement = true
            Me.columnResultsID.AllowDBNull = false
            Me.columnResultsID.Unique = true
        End Sub
        
        Public Function NewResultsRow() As ResultsRow
            Return CType(Me.NewRow,ResultsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ResultsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ResultsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ResultsRowChangedEvent) Is Nothing) Then
                RaiseEvent ResultsRowChanged(Me, New ResultsRowChangeEvent(CType(e.Row,ResultsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ResultsRowChangingEvent) Is Nothing) Then
                RaiseEvent ResultsRowChanging(Me, New ResultsRowChangeEvent(CType(e.Row,ResultsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ResultsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ResultsRowDeleted(Me, New ResultsRowChangeEvent(CType(e.Row,ResultsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ResultsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ResultsRowDeleting(Me, New ResultsRowChangeEvent(CType(e.Row,ResultsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveResultsRow(ByVal row As ResultsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As StudentsDataSet = New StudentsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ResultsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudentsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnStudentID As System.Data.DataColumn
        
        Private columnFirstName As System.Data.DataColumn
        
        Private columnLastName As System.Data.DataColumn
        
        Private columnAddress As System.Data.DataColumn
        
        Private columnCity As System.Data.DataColumn
        
        Private columnStateOrProvince As System.Data.DataColumn
        
        Private columnPostalCode As System.Data.DataColumn
        
        Private columnPhoneNumber As System.Data.DataColumn
        
        Private columnMajor As System.Data.DataColumn
        
        Private columnStudentNumber As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Students"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property StudentIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        Public ReadOnly Property FirstNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Public ReadOnly Property LastNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        Public ReadOnly Property AddressColumn() As System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Public ReadOnly Property CityColumn() As System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Public ReadOnly Property StateOrProvinceColumn() As System.Data.DataColumn
            Get
                Return Me.columnStateOrProvince
            End Get
        End Property
        
        Public ReadOnly Property PostalCodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnPostalCode
            End Get
        End Property
        
        Public ReadOnly Property PhoneNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhoneNumber
            End Get
        End Property
        
        Public ReadOnly Property MajorColumn() As System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        Public ReadOnly Property StudentNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnStudentNumber
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentsRow
            Get
                Return CType(Me.Rows(index),StudentsRow)
            End Get
        End Property
        
        Public Event StudentsRowChanged As StudentsRowChangeEventHandler
        
        Public Event StudentsRowChanging As StudentsRowChangeEventHandler
        
        Public Event StudentsRowDeleted As StudentsRowChangeEventHandler
        
        Public Event StudentsRowDeleting As StudentsRowChangeEventHandler
        
        Public Overloads Sub AddStudentsRow(ByVal row As StudentsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStudentsRow(ByVal FirstName As String, ByVal LastName As String, ByVal Address As String, ByVal City As String, ByVal StateOrProvince As String, ByVal PostalCode As String, ByVal PhoneNumber As String, ByVal Major As String, ByVal StudentNumber As String) As StudentsRow
            Dim rowStudentsRow As StudentsRow = CType(Me.NewRow,StudentsRow)
            rowStudentsRow.ItemArray = New Object() {Nothing, FirstName, LastName, Address, City, StateOrProvince, PostalCode, PhoneNumber, Major, StudentNumber}
            Me.Rows.Add(rowStudentsRow)
            Return rowStudentsRow
        End Function
        
        Public Function FindByStudentID(ByVal StudentID As Integer) As StudentsRow
            Return CType(Me.Rows.Find(New Object() {StudentID}),StudentsRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As StudentsDataTable = CType(MyBase.Clone,StudentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New StudentsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnStateOrProvince = MyBase.Columns("StateOrProvince")
            Me.columnPostalCode = MyBase.Columns("PostalCode")
            Me.columnPhoneNumber = MyBase.Columns("PhoneNumber")
            Me.columnMajor = MyBase.Columns("Major")
            Me.columnStudentNumber = MyBase.Columns("StudentNumber")
        End Sub
        
        Private Sub InitClass()
            Me.columnStudentID = New System.Data.DataColumn("StudentID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnFirstName = New System.Data.DataColumn("FirstName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New System.Data.DataColumn("LastName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New System.Data.DataColumn("Address", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New System.Data.DataColumn("City", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnStateOrProvince = New System.Data.DataColumn("StateOrProvince", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStateOrProvince)
            Me.columnPostalCode = New System.Data.DataColumn("PostalCode", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostalCode)
            Me.columnPhoneNumber = New System.Data.DataColumn("PhoneNumber", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhoneNumber)
            Me.columnMajor = New System.Data.DataColumn("Major", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columnStudentNumber = New System.Data.DataColumn("StudentNumber", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentNumber)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnStudentID}, true))
            Me.columnStudentID.AutoIncrement = true
            Me.columnStudentID.AllowDBNull = false
            Me.columnStudentID.Unique = true
            Me.columnFirstName.MaxLength = 50
            Me.columnLastName.MaxLength = 50
            Me.columnAddress.MaxLength = 255
            Me.columnCity.MaxLength = 50
            Me.columnStateOrProvince.MaxLength = 20
            Me.columnPostalCode.MaxLength = 20
            Me.columnPhoneNumber.MaxLength = 30
            Me.columnMajor.MaxLength = 50
            Me.columnStudentNumber.MaxLength = 30
        End Sub
        
        Public Function NewStudentsRow() As StudentsRow
            Return CType(Me.NewRow,StudentsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New StudentsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StudentsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentsRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentsRowChanged(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentsRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentsRowChanging(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentsRowDeleted(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentsRowDeleting(Me, New StudentsRowChangeEvent(CType(e.Row,StudentsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStudentsRow(ByVal row As StudentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As StudentsDataSet = New StudentsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Students_And_ClassesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnStudentClassID As System.Data.DataColumn
        
        Private columnClassID As System.Data.DataColumn
        
        Private columnStudentID As System.Data.DataColumn
        
        Private columnGrade As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Students And Classes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property StudentClassIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnStudentClassID
            End Get
        End Property
        
        Public ReadOnly Property ClassIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnClassID
            End Get
        End Property
        
        Public ReadOnly Property StudentIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        Public ReadOnly Property GradeColumn() As System.Data.DataColumn
            Get
                Return Me.columnGrade
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Students_And_ClassesRow
            Get
                Return CType(Me.Rows(index),Students_And_ClassesRow)
            End Get
        End Property
        
        Public Event Students_And_ClassesRowChanged As Students_And_ClassesRowChangeEventHandler
        
        Public Event Students_And_ClassesRowChanging As Students_And_ClassesRowChangeEventHandler
        
        Public Event Students_And_ClassesRowDeleted As Students_And_ClassesRowChangeEventHandler
        
        Public Event Students_And_ClassesRowDeleting As Students_And_ClassesRowChangeEventHandler
        
        Public Overloads Sub AddStudents_And_ClassesRow(ByVal row As Students_And_ClassesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStudents_And_ClassesRow(ByVal ClassID As Integer, ByVal parentStudentsRowByReference4 As StudentsRow, ByVal Grade As String) As Students_And_ClassesRow
            Dim rowStudents_And_ClassesRow As Students_And_ClassesRow = CType(Me.NewRow,Students_And_ClassesRow)
            rowStudents_And_ClassesRow.ItemArray = New Object() {Nothing, ClassID, parentStudentsRowByReference4(0), Grade}
            Me.Rows.Add(rowStudents_And_ClassesRow)
            Return rowStudents_And_ClassesRow
        End Function
        
        Public Function FindByStudentClassID(ByVal StudentClassID As Integer) As Students_And_ClassesRow
            Return CType(Me.Rows.Find(New Object() {StudentClassID}),Students_And_ClassesRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As Students_And_ClassesDataTable = CType(MyBase.Clone,Students_And_ClassesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New Students_And_ClassesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnStudentClassID = MyBase.Columns("StudentClassID")
            Me.columnClassID = MyBase.Columns("ClassID")
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnGrade = MyBase.Columns("Grade")
        End Sub
        
        Private Sub InitClass()
            Me.columnStudentClassID = New System.Data.DataColumn("StudentClassID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentClassID)
            Me.columnClassID = New System.Data.DataColumn("ClassID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassID)
            Me.columnStudentID = New System.Data.DataColumn("StudentID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnGrade = New System.Data.DataColumn("Grade", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnStudentClassID}, true))
            Me.columnStudentClassID.AutoIncrement = true
            Me.columnStudentClassID.AllowDBNull = false
            Me.columnStudentClassID.Unique = true
            Me.columnGrade.MaxLength = 30
            Me.ExtendedProperties.Add("Generator_RowClassName", "Students_And_ClassesRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "Students_And_ClassesRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "Students_And_ClassesRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "Students_And_ClassesDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "Students_And_Classes")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableStudents_And_Classes")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Students And Classes")
        End Sub
        
        Public Function NewStudents_And_ClassesRow() As Students_And_ClassesRow
            Return CType(Me.NewRow,Students_And_ClassesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New Students_And_ClassesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Students_And_ClassesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Students_And_ClassesRowChangedEvent) Is Nothing) Then
                RaiseEvent Students_And_ClassesRowChanged(Me, New Students_And_ClassesRowChangeEvent(CType(e.Row,Students_And_ClassesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Students_And_ClassesRowChangingEvent) Is Nothing) Then
                RaiseEvent Students_And_ClassesRowChanging(Me, New Students_And_ClassesRowChangeEvent(CType(e.Row,Students_And_ClassesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Students_And_ClassesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Students_And_ClassesRowDeleted(Me, New Students_And_ClassesRowChangeEvent(CType(e.Row,Students_And_ClassesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Students_And_ClassesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Students_And_ClassesRowDeleting(Me, New Students_And_ClassesRowChangeEvent(CType(e.Row,Students_And_ClassesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStudents_And_ClassesRow(ByVal row As Students_And_ClassesRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As StudentsDataSet = New StudentsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Students_And_ClassesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Switchboard_ItemsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSwitchboardID As System.Data.DataColumn
        
        Private columnItemNumber As System.Data.DataColumn
        
        Private columnItemText As System.Data.DataColumn
        
        Private columnCommand As System.Data.DataColumn
        
        Private columnArgument As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Switchboard Items"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property SwitchboardIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSwitchboardID
            End Get
        End Property
        
        Public ReadOnly Property ItemNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnItemNumber
            End Get
        End Property
        
        Public ReadOnly Property ItemTextColumn() As System.Data.DataColumn
            Get
                Return Me.columnItemText
            End Get
        End Property
        
        Public ReadOnly Property CommandColumn() As System.Data.DataColumn
            Get
                Return Me.columnCommand
            End Get
        End Property
        
        Public ReadOnly Property ArgumentColumn() As System.Data.DataColumn
            Get
                Return Me.columnArgument
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Switchboard_ItemsRow
            Get
                Return CType(Me.Rows(index),Switchboard_ItemsRow)
            End Get
        End Property
        
        Public Event Switchboard_ItemsRowChanged As Switchboard_ItemsRowChangeEventHandler
        
        Public Event Switchboard_ItemsRowChanging As Switchboard_ItemsRowChangeEventHandler
        
        Public Event Switchboard_ItemsRowDeleted As Switchboard_ItemsRowChangeEventHandler
        
        Public Event Switchboard_ItemsRowDeleting As Switchboard_ItemsRowChangeEventHandler
        
        Public Overloads Sub AddSwitchboard_ItemsRow(ByVal row As Switchboard_ItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSwitchboard_ItemsRow(ByVal SwitchboardID As Integer, ByVal ItemNumber As Short, ByVal ItemText As String, ByVal Command As Short, ByVal Argument As String) As Switchboard_ItemsRow
            Dim rowSwitchboard_ItemsRow As Switchboard_ItemsRow = CType(Me.NewRow,Switchboard_ItemsRow)
            rowSwitchboard_ItemsRow.ItemArray = New Object() {SwitchboardID, ItemNumber, ItemText, Command, Argument}
            Me.Rows.Add(rowSwitchboard_ItemsRow)
            Return rowSwitchboard_ItemsRow
        End Function
        
        Public Function FindBySwitchboardIDItemNumber(ByVal SwitchboardID As Integer, ByVal ItemNumber As Short) As Switchboard_ItemsRow
            Return CType(Me.Rows.Find(New Object() {SwitchboardID, ItemNumber}),Switchboard_ItemsRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As Switchboard_ItemsDataTable = CType(MyBase.Clone,Switchboard_ItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New Switchboard_ItemsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSwitchboardID = MyBase.Columns("SwitchboardID")
            Me.columnItemNumber = MyBase.Columns("ItemNumber")
            Me.columnItemText = MyBase.Columns("ItemText")
            Me.columnCommand = MyBase.Columns("Command")
            Me.columnArgument = MyBase.Columns("Argument")
        End Sub
        
        Private Sub InitClass()
            Me.columnSwitchboardID = New System.Data.DataColumn("SwitchboardID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSwitchboardID)
            Me.columnItemNumber = New System.Data.DataColumn("ItemNumber", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemNumber)
            Me.columnItemText = New System.Data.DataColumn("ItemText", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemText)
            Me.columnCommand = New System.Data.DataColumn("Command", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommand)
            Me.columnArgument = New System.Data.DataColumn("Argument", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArgument)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSwitchboardID, Me.columnItemNumber}, true))
            Me.columnSwitchboardID.AllowDBNull = false
            Me.columnItemNumber.AllowDBNull = false
            Me.columnItemText.MaxLength = 255
            Me.columnArgument.MaxLength = 50
            Me.ExtendedProperties.Add("Generator_RowClassName", "Switchboard_ItemsRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "Switchboard_ItemsRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "Switchboard_ItemsRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "Switchboard_ItemsDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "Switchboard_Items")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableSwitchboard_Items")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Switchboard Items")
        End Sub
        
        Public Function NewSwitchboard_ItemsRow() As Switchboard_ItemsRow
            Return CType(Me.NewRow,Switchboard_ItemsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New Switchboard_ItemsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Switchboard_ItemsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Switchboard_ItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent Switchboard_ItemsRowChanged(Me, New Switchboard_ItemsRowChangeEvent(CType(e.Row,Switchboard_ItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Switchboard_ItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent Switchboard_ItemsRowChanging(Me, New Switchboard_ItemsRowChangeEvent(CType(e.Row,Switchboard_ItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Switchboard_ItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent Switchboard_ItemsRowDeleted(Me, New Switchboard_ItemsRowChangeEvent(CType(e.Row,Switchboard_ItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Switchboard_ItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent Switchboard_ItemsRowDeleting(Me, New Switchboard_ItemsRowChangeEvent(CType(e.Row,Switchboard_ItemsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSwitchboard_ItemsRow(ByVal row As Switchboard_ItemsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As StudentsDataSet = New StudentsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Switchboard_ItemsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    Partial Public Class AssignmentsRow
        Inherits System.Data.DataRow
        
        Private tableAssignments As AssignmentsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssignments = CType(Me.Table,AssignmentsDataTable)
        End Sub
        
        Public Property AssignmentID() As Integer
            Get
                Return CType(Me(Me.tableAssignments.AssignmentIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAssignments.AssignmentIDColumn) = value
            End Set
        End Property
        
        Public Property AssignmentDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssignments.AssignmentDescriptionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AssignmentDescription' in table 'Assignments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssignments.AssignmentDescriptionColumn) = value
            End Set
        End Property
        
        Public Property ClassID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssignments.ClassIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ClassID' in table 'Assignments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssignments.ClassIDColumn) = value
            End Set
        End Property
        
        Public Property Exam() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAssignments.ExamColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Exam' in table 'Assignments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssignments.ExamColumn) = value
            End Set
        End Property
        
        Public Property PercentOfGrade() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAssignments.PercentOfGradeColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PercentOfGrade' in table 'Assignments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssignments.PercentOfGradeColumn) = value
            End Set
        End Property
        
        Public Property MaximumPoints() As Single
            Get
                Try 
                    Return CType(Me(Me.tableAssignments.MaximumPointsColumn),Single)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MaximumPoints' in table 'Assignments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssignments.MaximumPointsColumn) = value
            End Set
        End Property
        
        Public Property ClassesRow() As ClassesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Reference3")),ClassesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Reference3"))
            End Set
        End Property
        
        Public Function IsAssignmentDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableAssignments.AssignmentDescriptionColumn)
        End Function
        
        Public Sub SetAssignmentDescriptionNull()
            Me(Me.tableAssignments.AssignmentDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClassIDNull() As Boolean
            Return Me.IsNull(Me.tableAssignments.ClassIDColumn)
        End Function
        
        Public Sub SetClassIDNull()
            Me(Me.tableAssignments.ClassIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExamNull() As Boolean
            Return Me.IsNull(Me.tableAssignments.ExamColumn)
        End Function
        
        Public Sub SetExamNull()
            Me(Me.tableAssignments.ExamColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPercentOfGradeNull() As Boolean
            Return Me.IsNull(Me.tableAssignments.PercentOfGradeColumn)
        End Function
        
        Public Sub SetPercentOfGradeNull()
            Me(Me.tableAssignments.PercentOfGradeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaximumPointsNull() As Boolean
            Return Me.IsNull(Me.tableAssignments.MaximumPointsColumn)
        End Function
        
        Public Sub SetMaximumPointsNull()
            Me(Me.tableAssignments.MaximumPointsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetResultsRows() As ResultsRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Reference6")),ResultsRow())
        End Function
    End Class
    
    Partial Public Class ClassesRow
        Inherits System.Data.DataRow
        
        Private tableClasses As ClassesDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClasses = CType(Me.Table,ClassesDataTable)
        End Sub
        
        Public Property ClassID() As Integer
            Get
                Return CType(Me(Me.tableClasses.ClassIDColumn),Integer)
            End Get
            Set
                Me(Me.tableClasses.ClassIDColumn) = value
            End Set
        End Property
        
        Public Property ClassName() As String
            Get
                Try 
                    Return CType(Me(Me.tableClasses.ClassNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ClassName' in table 'Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClasses.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property Department() As String
            Get
                Try 
                    Return CType(Me(Me.tableClasses.DepartmentColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Department' in table 'Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClasses.DepartmentColumn) = value
            End Set
        End Property
        
        Public Property Prof() As String
            Get
                Try 
                    Return CType(Me(Me.tableClasses.ProfColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Prof' in table 'Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClasses.ProfColumn) = value
            End Set
        End Property
        
        Public Property SectionNumber() As Short
            Get
                Try 
                    Return CType(Me(Me.tableClasses.SectionNumberColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SectionNumber' in table 'Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClasses.SectionNumberColumn) = value
            End Set
        End Property
        
        Public Property Term() As String
            Get
                Try 
                    Return CType(Me(Me.tableClasses.TermColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Term' in table 'Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClasses.TermColumn) = value
            End Set
        End Property
        
        Public Property Units() As String
            Get
                Try 
                    Return CType(Me(Me.tableClasses.UnitsColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Units' in table 'Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClasses.UnitsColumn) = value
            End Set
        End Property
        
        Public Property Year() As Short
            Get
                Try 
                    Return CType(Me(Me.tableClasses.YearColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Year' in table 'Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClasses.YearColumn) = value
            End Set
        End Property
        
        Public Property Location() As String
            Get
                Try 
                    Return CType(Me(Me.tableClasses.LocationColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Location' in table 'Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClasses.LocationColumn) = value
            End Set
        End Property
        
        Public Property DaysAndTimes() As String
            Get
                Try 
                    Return CType(Me(Me.tableClasses.DaysAndTimesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DaysAndTimes' in table 'Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClasses.DaysAndTimesColumn) = value
            End Set
        End Property
        
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tableClasses.NotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Notes' in table 'Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClasses.NotesColumn) = value
            End Set
        End Property
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tableClasses.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.tableClasses.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDepartmentNull() As Boolean
            Return Me.IsNull(Me.tableClasses.DepartmentColumn)
        End Function
        
        Public Sub SetDepartmentNull()
            Me(Me.tableClasses.DepartmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProfNull() As Boolean
            Return Me.IsNull(Me.tableClasses.ProfColumn)
        End Function
        
        Public Sub SetProfNull()
            Me(Me.tableClasses.ProfColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSectionNumberNull() As Boolean
            Return Me.IsNull(Me.tableClasses.SectionNumberColumn)
        End Function
        
        Public Sub SetSectionNumberNull()
            Me(Me.tableClasses.SectionNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTermNull() As Boolean
            Return Me.IsNull(Me.tableClasses.TermColumn)
        End Function
        
        Public Sub SetTermNull()
            Me(Me.tableClasses.TermColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitsNull() As Boolean
            Return Me.IsNull(Me.tableClasses.UnitsColumn)
        End Function
        
        Public Sub SetUnitsNull()
            Me(Me.tableClasses.UnitsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tableClasses.YearColumn)
        End Function
        
        Public Sub SetYearNull()
            Me(Me.tableClasses.YearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLocationNull() As Boolean
            Return Me.IsNull(Me.tableClasses.LocationColumn)
        End Function
        
        Public Sub SetLocationNull()
            Me(Me.tableClasses.LocationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDaysAndTimesNull() As Boolean
            Return Me.IsNull(Me.tableClasses.DaysAndTimesColumn)
        End Function
        
        Public Sub SetDaysAndTimesNull()
            Me(Me.tableClasses.DaysAndTimesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableClasses.NotesColumn)
        End Function
        
        Public Sub SetNotesNull()
            Me(Me.tableClasses.NotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAssignmentsRows() As AssignmentsRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Reference3")),AssignmentsRow())
        End Function
    End Class
    
    Partial Public Class DepartmentsRow
        Inherits System.Data.DataRow
        
        Private tableDepartments As DepartmentsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDepartments = CType(Me.Table,DepartmentsDataTable)
        End Sub
        
        Public Property DepartmentID() As Integer
            Get
                Return CType(Me(Me.tableDepartments.DepartmentIDColumn),Integer)
            End Get
            Set
                Me(Me.tableDepartments.DepartmentIDColumn) = value
            End Set
        End Property
        
        Public Property DepartmentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartments.DepartmentNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DepartmentName' in table 'Departments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartments.DepartmentNameColumn) = value
            End Set
        End Property
        
        Public Property DepartmentNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDepartments.DepartmentNumberColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DepartmentNumber' in table 'Departments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartments.DepartmentNumberColumn) = value
            End Set
        End Property
        
        Public Property DepartmentManager() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartments.DepartmentManagerColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DepartmentManager' in table 'Departments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartments.DepartmentManagerColumn) = value
            End Set
        End Property
        
        Public Property DepartmentChairperson() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepartments.DepartmentChairpersonColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DepartmentChairperson' in table 'Departments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepartments.DepartmentChairpersonColumn) = value
            End Set
        End Property
        
        Public Function IsDepartmentNameNull() As Boolean
            Return Me.IsNull(Me.tableDepartments.DepartmentNameColumn)
        End Function
        
        Public Sub SetDepartmentNameNull()
            Me(Me.tableDepartments.DepartmentNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDepartmentNumberNull() As Boolean
            Return Me.IsNull(Me.tableDepartments.DepartmentNumberColumn)
        End Function
        
        Public Sub SetDepartmentNumberNull()
            Me(Me.tableDepartments.DepartmentNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDepartmentManagerNull() As Boolean
            Return Me.IsNull(Me.tableDepartments.DepartmentManagerColumn)
        End Function
        
        Public Sub SetDepartmentManagerNull()
            Me(Me.tableDepartments.DepartmentManagerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDepartmentChairpersonNull() As Boolean
            Return Me.IsNull(Me.tableDepartments.DepartmentChairpersonColumn)
        End Function
        
        Public Sub SetDepartmentChairpersonNull()
            Me(Me.tableDepartments.DepartmentChairpersonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class InstructorsRow
        Inherits System.Data.DataRow
        
        Private tableInstructors As InstructorsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableInstructors = CType(Me.Table,InstructorsDataTable)
        End Sub
        
        Public Property InstructorID() As Integer
            Get
                Return CType(Me(Me.tableInstructors.InstructorIDColumn),Integer)
            End Get
            Set
                Me(Me.tableInstructors.InstructorIDColumn) = value
            End Set
        End Property
        
        Public Property Instructor() As String
            Get
                Try 
                    Return CType(Me(Me.tableInstructors.InstructorColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Instructor' in table 'Instructors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInstructors.InstructorColumn) = value
            End Set
        End Property
        
        Public Property PhoneNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableInstructors.PhoneNumberColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PhoneNumber' in table 'Instructors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInstructors.PhoneNumberColumn) = value
            End Set
        End Property
        
        Public Property Extension() As String
            Get
                Try 
                    Return CType(Me(Me.tableInstructors.ExtensionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Extension' in table 'Instructors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInstructors.ExtensionColumn) = value
            End Set
        End Property
        
        Public Function IsInstructorNull() As Boolean
            Return Me.IsNull(Me.tableInstructors.InstructorColumn)
        End Function
        
        Public Sub SetInstructorNull()
            Me(Me.tableInstructors.InstructorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneNumberNull() As Boolean
            Return Me.IsNull(Me.tableInstructors.PhoneNumberColumn)
        End Function
        
        Public Sub SetPhoneNumberNull()
            Me(Me.tableInstructors.PhoneNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExtensionNull() As Boolean
            Return Me.IsNull(Me.tableInstructors.ExtensionColumn)
        End Function
        
        Public Sub SetExtensionNull()
            Me(Me.tableInstructors.ExtensionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class ResultsRow
        Inherits System.Data.DataRow
        
        Private tableResults As ResultsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableResults = CType(Me.Table,ResultsDataTable)
        End Sub
        
        Public Property ResultsID() As Integer
            Get
                Return CType(Me(Me.tableResults.ResultsIDColumn),Integer)
            End Get
            Set
                Me(Me.tableResults.ResultsIDColumn) = value
            End Set
        End Property
        
        Public Property StudentID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableResults.StudentIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'StudentID' in table 'Results' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResults.StudentIDColumn) = value
            End Set
        End Property
        
        Public Property AssignmentID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableResults.AssignmentIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AssignmentID' in table 'Results' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResults.AssignmentIDColumn) = value
            End Set
        End Property
        
        Public Property Score() As Double
            Get
                Try 
                    Return CType(Me(Me.tableResults.ScoreColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Score' in table 'Results' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResults.ScoreColumn) = value
            End Set
        End Property
        
        Public Property Late() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableResults.LateColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Late' in table 'Results' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResults.LateColumn) = value
            End Set
        End Property
        
        Public Property StudentsRow() As StudentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Reference5")),StudentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Reference5"))
            End Set
        End Property
        
        Public Property AssignmentsRow() As AssignmentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Reference6")),AssignmentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Reference6"))
            End Set
        End Property
        
        Public Function IsStudentIDNull() As Boolean
            Return Me.IsNull(Me.tableResults.StudentIDColumn)
        End Function
        
        Public Sub SetStudentIDNull()
            Me(Me.tableResults.StudentIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAssignmentIDNull() As Boolean
            Return Me.IsNull(Me.tableResults.AssignmentIDColumn)
        End Function
        
        Public Sub SetAssignmentIDNull()
            Me(Me.tableResults.AssignmentIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsScoreNull() As Boolean
            Return Me.IsNull(Me.tableResults.ScoreColumn)
        End Function
        
        Public Sub SetScoreNull()
            Me(Me.tableResults.ScoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLateNull() As Boolean
            Return Me.IsNull(Me.tableResults.LateColumn)
        End Function
        
        Public Sub SetLateNull()
            Me(Me.tableResults.LateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class StudentsRow
        Inherits System.Data.DataRow
        
        Private tableStudents As StudentsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudents = CType(Me.Table,StudentsDataTable)
        End Sub
        
        Public Property StudentID() As Integer
            Get
                Return CType(Me(Me.tableStudents.StudentIDColumn),Integer)
            End Get
            Set
                Me(Me.tableStudents.StudentIDColumn) = value
            End Set
        End Property
        
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.FirstNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FirstName' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.LastNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LastName' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.LastNameColumn) = value
            End Set
        End Property
        
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.AddressColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Address' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.AddressColumn) = value
            End Set
        End Property
        
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.CityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'City' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.CityColumn) = value
            End Set
        End Property
        
        Public Property StateOrProvince() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.StateOrProvinceColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'StateOrProvince' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.StateOrProvinceColumn) = value
            End Set
        End Property
        
        Public Property PostalCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.PostalCodeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.PostalCodeColumn) = value
            End Set
        End Property
        
        Public Property PhoneNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.PhoneNumberColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PhoneNumber' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.PhoneNumberColumn) = value
            End Set
        End Property
        
        Public Property Major() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.MajorColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Major' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.MajorColumn) = value
            End Set
        End Property
        
        Public Property StudentNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents.StudentNumberColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'StudentNumber' in table 'Students' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents.StudentNumberColumn) = value
            End Set
        End Property
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableStudents.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tableStudents.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableStudents.LastNameColumn)
        End Function
        
        Public Sub SetLastNameNull()
            Me(Me.tableStudents.LastNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableStudents.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tableStudents.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableStudents.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tableStudents.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStateOrProvinceNull() As Boolean
            Return Me.IsNull(Me.tableStudents.StateOrProvinceColumn)
        End Function
        
        Public Sub SetStateOrProvinceNull()
            Me(Me.tableStudents.StateOrProvinceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPostalCodeNull() As Boolean
            Return Me.IsNull(Me.tableStudents.PostalCodeColumn)
        End Function
        
        Public Sub SetPostalCodeNull()
            Me(Me.tableStudents.PostalCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneNumberNull() As Boolean
            Return Me.IsNull(Me.tableStudents.PhoneNumberColumn)
        End Function
        
        Public Sub SetPhoneNumberNull()
            Me(Me.tableStudents.PhoneNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMajorNull() As Boolean
            Return Me.IsNull(Me.tableStudents.MajorColumn)
        End Function
        
        Public Sub SetMajorNull()
            Me(Me.tableStudents.MajorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStudentNumberNull() As Boolean
            Return Me.IsNull(Me.tableStudents.StudentNumberColumn)
        End Function
        
        Public Sub SetStudentNumberNull()
            Me(Me.tableStudents.StudentNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetResultsRows() As ResultsRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Reference5")),ResultsRow())
        End Function
        
        Public Function GetStudents_And_ClassesRows() As Students_And_ClassesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Reference4")),Students_And_ClassesRow())
        End Function
    End Class
    
    Partial Public Class Students_And_ClassesRow
        Inherits System.Data.DataRow
        
        Private tableStudents_And_Classes As Students_And_ClassesDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudents_And_Classes = CType(Me.Table,Students_And_ClassesDataTable)
        End Sub
        
        Public Property StudentClassID() As Integer
            Get
                Return CType(Me(Me.tableStudents_And_Classes.StudentClassIDColumn),Integer)
            End Get
            Set
                Me(Me.tableStudents_And_Classes.StudentClassIDColumn) = value
            End Set
        End Property
        
        Public Property ClassID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudents_And_Classes.ClassIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ClassID' in table 'Students And Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents_And_Classes.ClassIDColumn) = value
            End Set
        End Property
        
        Public Property StudentID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStudents_And_Classes.StudentIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'StudentID' in table 'Students And Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents_And_Classes.StudentIDColumn) = value
            End Set
        End Property
        
        Public Property Grade() As String
            Get
                Try 
                    Return CType(Me(Me.tableStudents_And_Classes.GradeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Grade' in table 'Students And Classes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudents_And_Classes.GradeColumn) = value
            End Set
        End Property
        
        Public Property StudentsRow() As StudentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Reference4")),StudentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Reference4"))
            End Set
        End Property
        
        Public Function IsClassIDNull() As Boolean
            Return Me.IsNull(Me.tableStudents_And_Classes.ClassIDColumn)
        End Function
        
        Public Sub SetClassIDNull()
            Me(Me.tableStudents_And_Classes.ClassIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStudentIDNull() As Boolean
            Return Me.IsNull(Me.tableStudents_And_Classes.StudentIDColumn)
        End Function
        
        Public Sub SetStudentIDNull()
            Me(Me.tableStudents_And_Classes.StudentIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGradeNull() As Boolean
            Return Me.IsNull(Me.tableStudents_And_Classes.GradeColumn)
        End Function
        
        Public Sub SetGradeNull()
            Me(Me.tableStudents_And_Classes.GradeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class Switchboard_ItemsRow
        Inherits System.Data.DataRow
        
        Private tableSwitchboard_Items As Switchboard_ItemsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSwitchboard_Items = CType(Me.Table,Switchboard_ItemsDataTable)
        End Sub
        
        Public Property SwitchboardID() As Integer
            Get
                Return CType(Me(Me.tableSwitchboard_Items.SwitchboardIDColumn),Integer)
            End Get
            Set
                Me(Me.tableSwitchboard_Items.SwitchboardIDColumn) = value
            End Set
        End Property
        
        Public Property ItemNumber() As Short
            Get
                Return CType(Me(Me.tableSwitchboard_Items.ItemNumberColumn),Short)
            End Get
            Set
                Me(Me.tableSwitchboard_Items.ItemNumberColumn) = value
            End Set
        End Property
        
        Public Property ItemText() As String
            Get
                Try 
                    Return CType(Me(Me.tableSwitchboard_Items.ItemTextColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ItemText' in table 'Switchboard Items' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSwitchboard_Items.ItemTextColumn) = value
            End Set
        End Property
        
        Public Property Command() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSwitchboard_Items.CommandColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Command' in table 'Switchboard Items' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSwitchboard_Items.CommandColumn) = value
            End Set
        End Property
        
        Public Property Argument() As String
            Get
                Try 
                    Return CType(Me(Me.tableSwitchboard_Items.ArgumentColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Argument' in table 'Switchboard Items' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSwitchboard_Items.ArgumentColumn) = value
            End Set
        End Property
        
        Public Function IsItemTextNull() As Boolean
            Return Me.IsNull(Me.tableSwitchboard_Items.ItemTextColumn)
        End Function
        
        Public Sub SetItemTextNull()
            Me(Me.tableSwitchboard_Items.ItemTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommandNull() As Boolean
            Return Me.IsNull(Me.tableSwitchboard_Items.CommandColumn)
        End Function
        
        Public Sub SetCommandNull()
            Me(Me.tableSwitchboard_Items.CommandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArgumentNull() As Boolean
            Return Me.IsNull(Me.tableSwitchboard_Items.ArgumentColumn)
        End Function
        
        Public Sub SetArgumentNull()
            Me(Me.tableSwitchboard_Items.ArgumentColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class AssignmentsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AssignmentsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As AssignmentsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As AssignmentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class ClassesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ClassesRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As ClassesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As ClassesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class DepartmentsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DepartmentsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As DepartmentsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As DepartmentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class InstructorsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As InstructorsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As InstructorsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As InstructorsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class ResultsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ResultsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As ResultsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As ResultsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class StudentsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As StudentsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As StudentsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As StudentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class Students_And_ClassesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As Students_And_ClassesRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As Students_And_ClassesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As Students_And_ClassesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class Switchboard_ItemsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As Switchboard_ItemsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As Switchboard_ItemsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As Switchboard_ItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace StudentsDataSetTableAdapters
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssignmentsTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private m_connection As System.Data.OleDb.OleDbConnection
        
        Private m_commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private m_clearBeforeFill As Boolean
        
        Public Sub New()
            MyBase.New
            Me.m_clearBeforeFill = true
        End Sub
        
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me.m_adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me.m_adapter
            End Get
        End Property
        
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me.m_connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me.m_connection
            End Get
            Set
                Me.m_connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me.m_commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me.m_commandCollection
            End Get
        End Property
        
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me.m_clearBeforeFill
            End Get
            Set
                Me.m_clearBeforeFill = value
            End Set
        End Property
        
        Private Sub InitAdapter()
            Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Assignments"
            tableMapping.ColumnMappings.Add("AssignmentID", "AssignmentID")
            tableMapping.ColumnMappings.Add("AssignmentDescription", "AssignmentDescription")
            tableMapping.ColumnMappings.Add("ClassID", "ClassID")
            tableMapping.ColumnMappings.Add("Exam", "Exam")
            tableMapping.ColumnMappings.Add("PercentOfGrade", "PercentOfGrade")
            tableMapping.ColumnMappings.Add("MaximumPoints", "MaximumPoints")
            Me.m_adapter.TableMappings.Add(tableMapping)
            Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.DeleteCommand.Connection = Me.Connection
            Me.m_adapter.DeleteCommand.CommandText = "DELETE FROM `Assignments` WHERE ((`AssignmentID` = ?) AND ((? = 1 AND `Assignment"& _ 
                "Description` IS NULL) OR (`AssignmentDescription` = ?)) AND ((? = 1 AND `ClassID"& _ 
                "` IS NULL) OR (`ClassID` = ?)) AND ((? = 1 AND `Exam` IS NULL) OR (`Exam` = ?)) "& _ 
                "AND ((? = 1 AND `PercentOfGrade` IS NULL) OR (`PercentOfGrade` = ?)) AND ((? = 1"& _ 
                " AND `MaximumPoints` IS NULL) OR (`MaximumPoints` = ?)))"
            Me.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentDescription", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentDescription", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Exam", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Exam", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PercentOfGrade", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PercentOfGrade", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MaximumPoints", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.[Single], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MaximumPoints", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.InsertCommand.Connection = Me.Connection
            Me.m_adapter.InsertCommand.CommandText = "INSERT INTO `Assignments` (`AssignmentDescription`, `ClassID`, `Exam`, `PercentOf"& _ 
                "Grade`, `MaximumPoints`) VALUES (?, ?, ?, ?, ?)"
            Me.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentDescription", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Exam", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PercentOfGrade", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Single], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MaximumPoints", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.UpdateCommand.Connection = Me.Connection
            Me.m_adapter.UpdateCommand.CommandText = "UPDATE `Assignments` SET `AssignmentDescription` = ?, `ClassID` = ?, `Exam` = ?, "& _ 
                "`PercentOfGrade` = ?, `MaximumPoints` = ? WHERE ((`AssignmentID` = ?) AND ((? = "& _ 
                "1 AND `AssignmentDescription` IS NULL) OR (`AssignmentDescription` = ?)) AND ((?"& _ 
                " = 1 AND `ClassID` IS NULL) OR (`ClassID` = ?)) AND ((? = 1 AND `Exam` IS NULL) "& _ 
                "OR (`Exam` = ?)) AND ((? = 1 AND `PercentOfGrade` IS NULL) OR (`PercentOfGrade` "& _ 
                "= ?)) AND ((? = 1 AND `MaximumPoints` IS NULL) OR (`MaximumPoints` = ?)))"
            Me.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentDescription", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Exam", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PercentOfGrade", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Single], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MaximumPoints", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentDescription", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentDescription", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Exam", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Exam", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PercentOfGrade", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PercentOfGrade", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MaximumPoints", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.[Single], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MaximumPoints", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        Private Sub InitConnection()
            Me.m_connection = New System.Data.OleDb.OleDbConnection
            Me.m_connection.ConnectionString = DataGridView_Sample.Settings.Default.StudentsConnectionString
        End Sub
        
        Private Sub InitCommandCollection()
            Me.m_commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me.m_commandCollection(0).Connection = Me.Connection
            Me.m_commandCollection(0).CommandText = "SELECT AssignmentID, AssignmentDescription, ClassID, Exam, PercentOfGrade, Maximu"& _ 
                "mPoints FROM Assignments"
            Me.m_commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StudentsDataSet.AssignmentsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.m_clearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As StudentsDataSet.AssignmentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StudentsDataSet.AssignmentsDataTable = New StudentsDataSet.AssignmentsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataTable As StudentsDataSet.AssignmentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataSet As StudentsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Assignments")
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Integer, ByVal p3 As String, ByVal p5 As Integer, ByVal p7 As Boolean, ByVal p9 As System.Nullable(Of Double), ByVal p11 As Single) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
            If (p3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,Boolean)
            If (p9.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Integer)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(p11,Single)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            Me.Adapter.DeleteCommand.Connection.Open
            Try 
                Return Me.Adapter.DeleteCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As Integer, ByVal p3 As Boolean, ByVal p4 As System.Nullable(Of Double), ByVal p5 As Single) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,Boolean)
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,Single)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            Me.Adapter.InsertCommand.Connection.Open
            Try 
                Return Me.Adapter.InsertCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As Integer, ByVal p3 As Boolean, ByVal p4 As System.Nullable(Of Double), ByVal p5 As Single, ByVal p6 As Integer, ByVal p8 As String, ByVal p10 As Integer, ByVal p12 As Boolean, ByVal p14 As System.Nullable(Of Double), ByVal p16 As Single) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,Boolean)
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,Single)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,Integer)
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,Boolean)
            If (p14.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,Single)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            Me.Adapter.UpdateCommand.Connection.Open
            Try 
                Return Me.Adapter.UpdateCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ClassesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private m_connection As System.Data.OleDb.OleDbConnection
        
        Private m_commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private m_clearBeforeFill As Boolean
        
        Public Sub New()
            MyBase.New
            Me.m_clearBeforeFill = true
        End Sub
        
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me.m_adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me.m_adapter
            End Get
        End Property
        
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me.m_connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me.m_connection
            End Get
            Set
                Me.m_connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me.m_commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me.m_commandCollection
            End Get
        End Property
        
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me.m_clearBeforeFill
            End Get
            Set
                Me.m_clearBeforeFill = value
            End Set
        End Property
        
        Private Sub InitAdapter()
            Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Classes"
            tableMapping.ColumnMappings.Add("ClassID", "ClassID")
            tableMapping.ColumnMappings.Add("ClassName", "ClassName")
            tableMapping.ColumnMappings.Add("Department", "Department")
            tableMapping.ColumnMappings.Add("Prof", "Prof")
            tableMapping.ColumnMappings.Add("SectionNumber", "SectionNumber")
            tableMapping.ColumnMappings.Add("Term", "Term")
            tableMapping.ColumnMappings.Add("Units", "Units")
            tableMapping.ColumnMappings.Add("Year", "Year")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("DaysAndTimes", "DaysAndTimes")
            tableMapping.ColumnMappings.Add("Notes", "Notes")
            Me.m_adapter.TableMappings.Add(tableMapping)
            Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.DeleteCommand.Connection = Me.Connection
            Me.m_adapter.DeleteCommand.CommandText = "DELETE FROM `Classes` WHERE ((`ClassID` = ?) AND ((? = 1 AND `ClassName` IS NULL)"& _ 
                " OR (`ClassName` = ?)) AND ((? = 1 AND `Department` IS NULL) OR (`Department` = "& _ 
                "?)) AND ((? = 1 AND `Prof` IS NULL) OR (`Prof` = ?)) AND ((? = 1 AND `SectionNum"& _ 
                "ber` IS NULL) OR (`SectionNumber` = ?)) AND ((? = 1 AND `Term` IS NULL) OR (`Ter"& _ 
                "m` = ?)) AND ((? = 1 AND `Units` IS NULL) OR (`Units` = ?)) AND ((? = 1 AND `Yea"& _ 
                "r` IS NULL) OR (`Year` = ?)) AND ((? = 1 AND `Location` IS NULL) OR (`Location` "& _ 
                "= ?)) AND ((? = 1 AND `DaysAndTimes` IS NULL) OR (`DaysAndTimes` = ?)))"
            Me.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassName", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassName", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Department", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Department", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Prof", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Prof", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SectionNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SectionNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Term", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Term", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Units", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Units", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Year", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Year", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Location", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Location", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DaysAndTimes", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DaysAndTimes", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.InsertCommand.Connection = Me.Connection
            Me.m_adapter.InsertCommand.CommandText = "INSERT INTO `Classes` (`ClassName`, `Department`, `Prof`, `SectionNumber`, `Term`"& _ 
                ", `Units`, `Year`, `Location`, `DaysAndTimes`, `Notes`) VALUES (?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?)"
            Me.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassName", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Department", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Prof", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SectionNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Term", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Units", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Year", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Location", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DaysAndTimes", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Notes", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.UpdateCommand.Connection = Me.Connection
            Me.m_adapter.UpdateCommand.CommandText = "UPDATE `Classes` SET `ClassName` = ?, `Department` = ?, `Prof` = ?, `SectionNumbe"& _ 
                "r` = ?, `Term` = ?, `Units` = ?, `Year` = ?, `Location` = ?, `DaysAndTimes` = ?,"& _ 
                " `Notes` = ? WHERE ((`ClassID` = ?) AND ((? = 1 AND `ClassName` IS NULL) OR (`Cl"& _ 
                "assName` = ?)) AND ((? = 1 AND `Department` IS NULL) OR (`Department` = ?)) AND "& _ 
                "((? = 1 AND `Prof` IS NULL) OR (`Prof` = ?)) AND ((? = 1 AND `SectionNumber` IS "& _ 
                "NULL) OR (`SectionNumber` = ?)) AND ((? = 1 AND `Term` IS NULL) OR (`Term` = ?))"& _ 
                " AND ((? = 1 AND `Units` IS NULL) OR (`Units` = ?)) AND ((? = 1 AND `Year` IS NU"& _ 
                "LL) OR (`Year` = ?)) AND ((? = 1 AND `Location` IS NULL) OR (`Location` = ?)) AN"& _ 
                "D ((? = 1 AND `DaysAndTimes` IS NULL) OR (`DaysAndTimes` = ?)))"
            Me.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassName", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Department", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Prof", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SectionNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Term", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Units", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Year", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Location", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DaysAndTimes", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Notes", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassName", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassName", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Department", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Department", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Prof", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Prof", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SectionNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SectionNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Term", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Term", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p22", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Units", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p23", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Units", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p24", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Year", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p25", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Year", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p26", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Location", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p27", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Location", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p28", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DaysAndTimes", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p29", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DaysAndTimes", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        Private Sub InitConnection()
            Me.m_connection = New System.Data.OleDb.OleDbConnection
            Me.m_connection.ConnectionString = DataGridView_Sample.Settings.Default.StudentsConnectionString
        End Sub
        
        Private Sub InitCommandCollection()
            Me.m_commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me.m_commandCollection(0).Connection = Me.Connection
            Me.m_commandCollection(0).CommandText = "SELECT ClassID, ClassName, Department, Prof, SectionNumber, Term, Units, [Year], "& _ 
                "Location, DaysAndTimes, Notes FROM Classes"
            Me.m_commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StudentsDataSet.ClassesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.m_clearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As StudentsDataSet.ClassesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StudentsDataSet.ClassesDataTable = New StudentsDataSet.ClassesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataTable As StudentsDataSet.ClassesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataSet As StudentsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Classes")
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Integer, ByVal p3 As String, ByVal p5 As String, ByVal p7 As String, ByVal p9 As System.Nullable(Of Short), ByVal p11 As String, ByVal p13 As String, ByVal p15 As System.Nullable(Of Short), ByVal p17 As String, ByVal p19 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
            If (p3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p15.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(p15.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(p19,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            Me.Adapter.DeleteCommand.Connection.Open
            Try 
                Return Me.Adapter.DeleteCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As System.Nullable(Of Short), ByVal p5 As String, ByVal p6 As String, ByVal p7 As System.Nullable(Of Short), ByVal p8 As String, ByVal p9 As String, ByVal p10 As String) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            Me.Adapter.InsertCommand.Connection.Open
            Try 
                Return Me.Adapter.InsertCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As System.Nullable(Of Short),  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As System.Nullable(Of Short),  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As Integer,  _
                    ByVal p13 As String,  _
                    ByVal p15 As String,  _
                    ByVal p17 As String,  _
                    ByVal p19 As System.Nullable(Of Short),  _
                    ByVal p21 As String,  _
                    ByVal p23 As String,  _
                    ByVal p25 As System.Nullable(Of Short),  _
                    ByVal p27 As String,  _
                    ByVal p29 As String) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,Integer)
            If (p13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p19.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (p21 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21,String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p23,String)
            End If
            If (p25.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p25.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (p27 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(p27,String)
            End If
            If (p29 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(p29,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            Me.Adapter.UpdateCommand.Connection.Open
            Try 
                Return Me.Adapter.UpdateCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DepartmentsTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private m_connection As System.Data.OleDb.OleDbConnection
        
        Private m_commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private m_clearBeforeFill As Boolean
        
        Public Sub New()
            MyBase.New
            Me.m_clearBeforeFill = true
        End Sub
        
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me.m_adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me.m_adapter
            End Get
        End Property
        
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me.m_connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me.m_connection
            End Get
            Set
                Me.m_connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me.m_commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me.m_commandCollection
            End Get
        End Property
        
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me.m_clearBeforeFill
            End Get
            Set
                Me.m_clearBeforeFill = value
            End Set
        End Property
        
        Private Sub InitAdapter()
            Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Departments"
            tableMapping.ColumnMappings.Add("DepartmentID", "DepartmentID")
            tableMapping.ColumnMappings.Add("DepartmentName", "DepartmentName")
            tableMapping.ColumnMappings.Add("DepartmentNumber", "DepartmentNumber")
            tableMapping.ColumnMappings.Add("DepartmentManager", "DepartmentManager")
            tableMapping.ColumnMappings.Add("DepartmentChairperson", "DepartmentChairperson")
            Me.m_adapter.TableMappings.Add(tableMapping)
            Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.DeleteCommand.Connection = Me.Connection
            Me.m_adapter.DeleteCommand.CommandText = "DELETE FROM `Departments` WHERE ((`DepartmentID` = ?) AND ((? = 1 AND `Department"& _ 
                "Name` IS NULL) OR (`DepartmentName` = ?)) AND ((? = 1 AND `DepartmentNumber` IS "& _ 
                "NULL) OR (`DepartmentNumber` = ?)) AND ((? = 1 AND `DepartmentManager` IS NULL) "& _ 
                "OR (`DepartmentManager` = ?)) AND ((? = 1 AND `DepartmentChairperson` IS NULL) O"& _ 
                "R (`DepartmentChairperson` = ?)))"
            Me.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentName", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentName", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentManager", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentManager", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentChairperson", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentChairperson", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.InsertCommand.Connection = Me.Connection
            Me.m_adapter.InsertCommand.CommandText = "INSERT INTO `Departments` (`DepartmentName`, `DepartmentNumber`, `DepartmentManag"& _ 
                "er`, `DepartmentChairperson`) VALUES (?, ?, ?, ?)"
            Me.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentName", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentManager", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentChairperson", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.UpdateCommand.Connection = Me.Connection
            Me.m_adapter.UpdateCommand.CommandText = "UPDATE `Departments` SET `DepartmentName` = ?, `DepartmentNumber` = ?, `Departmen"& _ 
                "tManager` = ?, `DepartmentChairperson` = ? WHERE ((`DepartmentID` = ?) AND ((? ="& _ 
                " 1 AND `DepartmentName` IS NULL) OR (`DepartmentName` = ?)) AND ((? = 1 AND `Dep"& _ 
                "artmentNumber` IS NULL) OR (`DepartmentNumber` = ?)) AND ((? = 1 AND `Department"& _ 
                "Manager` IS NULL) OR (`DepartmentManager` = ?)) AND ((? = 1 AND `DepartmentChair"& _ 
                "person` IS NULL) OR (`DepartmentChairperson` = ?)))"
            Me.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentName", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentManager", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentChairperson", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentName", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentName", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentManager", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentManager", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentChairperson", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepartmentChairperson", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        Private Sub InitConnection()
            Me.m_connection = New System.Data.OleDb.OleDbConnection
            Me.m_connection.ConnectionString = DataGridView_Sample.Settings.Default.StudentsConnectionString
        End Sub
        
        Private Sub InitCommandCollection()
            Me.m_commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me.m_commandCollection(0).Connection = Me.Connection
            Me.m_commandCollection(0).CommandText = "SELECT DepartmentID, DepartmentName, DepartmentNumber, DepartmentManager, Departm"& _ 
                "entChairperson FROM Departments"
            Me.m_commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StudentsDataSet.DepartmentsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.m_clearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As StudentsDataSet.DepartmentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StudentsDataSet.DepartmentsDataTable = New StudentsDataSet.DepartmentsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataTable As StudentsDataSet.DepartmentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataSet As StudentsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Departments")
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Integer, ByVal p3 As String, ByVal p5 As System.Nullable(Of Integer), ByVal p7 As String, ByVal p9 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
            If (p3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            Me.Adapter.DeleteCommand.Connection.Open
            Try 
                Return Me.Adapter.DeleteCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As System.Nullable(Of Integer), ByVal p3 As String, ByVal p4 As String) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            Me.Adapter.InsertCommand.Connection.Open
            Try 
                Return Me.Adapter.InsertCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As System.Nullable(Of Integer), ByVal p3 As String, ByVal p4 As String, ByVal p5 As Integer, ByVal p7 As String, ByVal p9 As System.Nullable(Of Integer), ByVal p11 As String, ByVal p13 As String) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,Integer)
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            Me.Adapter.UpdateCommand.Connection.Open
            Try 
                Return Me.Adapter.UpdateCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class InstructorsTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private m_connection As System.Data.OleDb.OleDbConnection
        
        Private m_commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private m_clearBeforeFill As Boolean
        
        Public Sub New()
            MyBase.New
            Me.m_clearBeforeFill = true
        End Sub
        
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me.m_adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me.m_adapter
            End Get
        End Property
        
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me.m_connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me.m_connection
            End Get
            Set
                Me.m_connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me.m_commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me.m_commandCollection
            End Get
        End Property
        
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me.m_clearBeforeFill
            End Get
            Set
                Me.m_clearBeforeFill = value
            End Set
        End Property
        
        Private Sub InitAdapter()
            Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Instructors"
            tableMapping.ColumnMappings.Add("InstructorID", "InstructorID")
            tableMapping.ColumnMappings.Add("Instructor", "Instructor")
            tableMapping.ColumnMappings.Add("PhoneNumber", "PhoneNumber")
            tableMapping.ColumnMappings.Add("Extension", "Extension")
            Me.m_adapter.TableMappings.Add(tableMapping)
            Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.DeleteCommand.Connection = Me.Connection
            Me.m_adapter.DeleteCommand.CommandText = "DELETE FROM `Instructors` WHERE ((`InstructorID` = ?) AND ((? = 1 AND `Instructor"& _ 
                "` IS NULL) OR (`Instructor` = ?)) AND ((? = 1 AND `PhoneNumber` IS NULL) OR (`Ph"& _ 
                "oneNumber` = ?)) AND ((? = 1 AND `Extension` IS NULL) OR (`Extension` = ?)))"
            Me.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InstructorID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Instructor", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Instructor", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Extension", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Extension", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.InsertCommand.Connection = Me.Connection
            Me.m_adapter.InsertCommand.CommandText = "INSERT INTO `Instructors` (`Instructor`, `PhoneNumber`, `Extension`) VALUES (?, ?"& _ 
                ", ?)"
            Me.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Instructor", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Extension", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.UpdateCommand.Connection = Me.Connection
            Me.m_adapter.UpdateCommand.CommandText = "UPDATE `Instructors` SET `Instructor` = ?, `PhoneNumber` = ?, `Extension` = ? WHE"& _ 
                "RE ((`InstructorID` = ?) AND ((? = 1 AND `Instructor` IS NULL) OR (`Instructor` "& _ 
                "= ?)) AND ((? = 1 AND `PhoneNumber` IS NULL) OR (`PhoneNumber` = ?)) AND ((? = 1"& _ 
                " AND `Extension` IS NULL) OR (`Extension` = ?)))"
            Me.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Instructor", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Extension", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InstructorID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Instructor", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Instructor", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Extension", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Extension", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        Private Sub InitConnection()
            Me.m_connection = New System.Data.OleDb.OleDbConnection
            Me.m_connection.ConnectionString = DataGridView_Sample.Settings.Default.StudentsConnectionString
        End Sub
        
        Private Sub InitCommandCollection()
            Me.m_commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me.m_commandCollection(0).Connection = Me.Connection
            Me.m_commandCollection(0).CommandText = "SELECT InstructorID, Instructor, PhoneNumber, Extension FROM Instructors"
            Me.m_commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StudentsDataSet.InstructorsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.m_clearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As StudentsDataSet.InstructorsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StudentsDataSet.InstructorsDataTable = New StudentsDataSet.InstructorsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataTable As StudentsDataSet.InstructorsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataSet As StudentsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Instructors")
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Integer, ByVal p3 As String, ByVal p5 As String, ByVal p7 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
            If (p3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            Me.Adapter.DeleteCommand.Connection.Open
            Try 
                Return Me.Adapter.DeleteCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            Me.Adapter.InsertCommand.Connection.Open
            Try 
                Return Me.Adapter.InsertCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Integer, ByVal p6 As String, ByVal p8 As String, ByVal p10 As String) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,Integer)
            If (p6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            Me.Adapter.UpdateCommand.Connection.Open
            Try 
                Return Me.Adapter.UpdateCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ResultsTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private m_connection As System.Data.OleDb.OleDbConnection
        
        Private m_commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private m_clearBeforeFill As Boolean
        
        Public Sub New()
            MyBase.New
            Me.m_clearBeforeFill = true
        End Sub
        
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me.m_adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me.m_adapter
            End Get
        End Property
        
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me.m_connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me.m_connection
            End Get
            Set
                Me.m_connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me.m_commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me.m_commandCollection
            End Get
        End Property
        
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me.m_clearBeforeFill
            End Get
            Set
                Me.m_clearBeforeFill = value
            End Set
        End Property
        
        Private Sub InitAdapter()
            Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Results"
            tableMapping.ColumnMappings.Add("ResultsID", "ResultsID")
            tableMapping.ColumnMappings.Add("StudentID", "StudentID")
            tableMapping.ColumnMappings.Add("AssignmentID", "AssignmentID")
            tableMapping.ColumnMappings.Add("Score", "Score")
            tableMapping.ColumnMappings.Add("Late", "Late")
            Me.m_adapter.TableMappings.Add(tableMapping)
            Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.DeleteCommand.Connection = Me.Connection
            Me.m_adapter.DeleteCommand.CommandText = "DELETE FROM `Results` WHERE ((`ResultsID` = ?) AND ((? = 1 AND `StudentID` IS NUL"& _ 
                "L) OR (`StudentID` = ?)) AND ((? = 1 AND `AssignmentID` IS NULL) OR (`Assignment"& _ 
                "ID` = ?)) AND ((? = 1 AND `Score` IS NULL) OR (`Score` = ?)) AND ((? = 1 AND `La"& _ 
                "te` IS NULL) OR (`Late` = ?)))"
            Me.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ResultsID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentID", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Score", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Score", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Late", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Late", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.InsertCommand.Connection = Me.Connection
            Me.m_adapter.InsertCommand.CommandText = "INSERT INTO `Results` (`StudentID`, `AssignmentID`, `Score`, `Late`) VALUES (?, ?"& _ 
                ", ?, ?)"
            Me.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Score", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Late", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.UpdateCommand.Connection = Me.Connection
            Me.m_adapter.UpdateCommand.CommandText = "UPDATE `Results` SET `StudentID` = ?, `AssignmentID` = ?, `Score` = ?, `Late` = ?"& _ 
                " WHERE ((`ResultsID` = ?) AND ((? = 1 AND `StudentID` IS NULL) OR (`StudentID` ="& _ 
                " ?)) AND ((? = 1 AND `AssignmentID` IS NULL) OR (`AssignmentID` = ?)) AND ((? = "& _ 
                "1 AND `Score` IS NULL) OR (`Score` = ?)) AND ((? = 1 AND `Late` IS NULL) OR (`La"& _ 
                "te` = ?)))"
            Me.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Score", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Late", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ResultsID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentID", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AssignmentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Score", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Score", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Late", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Late", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        Private Sub InitConnection()
            Me.m_connection = New System.Data.OleDb.OleDbConnection
            Me.m_connection.ConnectionString = DataGridView_Sample.Settings.Default.StudentsConnectionString
        End Sub
        
        Private Sub InitCommandCollection()
            Me.m_commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me.m_commandCollection(0).Connection = Me.Connection
            Me.m_commandCollection(0).CommandText = "SELECT ResultsID, StudentID, AssignmentID, Score, Late FROM Results"
            Me.m_commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StudentsDataSet.ResultsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.m_clearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As StudentsDataSet.ResultsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StudentsDataSet.ResultsDataTable = New StudentsDataSet.ResultsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataTable As StudentsDataSet.ResultsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataSet As StudentsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Results")
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Integer, ByVal p3 As System.Nullable(Of Integer), ByVal p5 As System.Nullable(Of Integer), ByVal p7 As System.Nullable(Of Double), ByVal p9 As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
            If (p3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9,Boolean)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            Me.Adapter.DeleteCommand.Connection.Open
            Try 
                Return Me.Adapter.DeleteCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As System.Nullable(Of Integer), ByVal p2 As System.Nullable(Of Integer), ByVal p3 As System.Nullable(Of Double), ByVal p4 As Boolean) As Integer
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (p3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,Boolean)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            Me.Adapter.InsertCommand.Connection.Open
            Try 
                Return Me.Adapter.InsertCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As System.Nullable(Of Integer), ByVal p2 As System.Nullable(Of Integer), ByVal p3 As System.Nullable(Of Double), ByVal p4 As Boolean, ByVal p5 As Integer, ByVal p7 As System.Nullable(Of Integer), ByVal p9 As System.Nullable(Of Integer), ByVal p11 As System.Nullable(Of Double), ByVal p13 As Boolean) As Integer
            If (p1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (p3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,Boolean)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,Integer)
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,Boolean)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            Me.Adapter.UpdateCommand.Connection.Open
            Try 
                Return Me.Adapter.UpdateCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class StudentsTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private m_connection As System.Data.OleDb.OleDbConnection
        
        Private m_commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private m_clearBeforeFill As Boolean
        
        Public Sub New()
            MyBase.New
            Me.m_clearBeforeFill = true
        End Sub
        
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me.m_adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me.m_adapter
            End Get
        End Property
        
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me.m_connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me.m_connection
            End Get
            Set
                Me.m_connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me.m_commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me.m_commandCollection
            End Get
        End Property
        
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me.m_clearBeforeFill
            End Get
            Set
                Me.m_clearBeforeFill = value
            End Set
        End Property
        
        Private Sub InitAdapter()
            Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Students"
            tableMapping.ColumnMappings.Add("StudentID", "StudentID")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("City", "City")
            tableMapping.ColumnMappings.Add("StateOrProvince", "StateOrProvince")
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode")
            tableMapping.ColumnMappings.Add("PhoneNumber", "PhoneNumber")
            tableMapping.ColumnMappings.Add("Major", "Major")
            tableMapping.ColumnMappings.Add("StudentNumber", "StudentNumber")
            Me.m_adapter.TableMappings.Add(tableMapping)
            Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.DeleteCommand.Connection = Me.Connection
            Me.m_adapter.DeleteCommand.CommandText = "DELETE FROM `Students` WHERE ((`StudentID` = ?) AND ((? = 1 AND `FirstName` IS NU"& _ 
                "LL) OR (`FirstName` = ?)) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?"& _ 
                ")) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City`"& _ 
                " IS NULL) OR (`City` = ?)) AND ((? = 1 AND `StateOrProvince` IS NULL) OR (`State"& _ 
                "OrProvince` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) A"& _ 
                "ND ((? = 1 AND `PhoneNumber` IS NULL) OR (`PhoneNumber` = ?)) AND ((? = 1 AND `M"& _ 
                "ajor` IS NULL) OR (`Major` = ?)) AND ((? = 1 AND `StudentNumber` IS NULL) OR (`S"& _ 
                "tudentNumber` = ?)))"
            Me.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FirstName", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FirstName", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LastName", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LastName", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Address", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Address", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "City", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "City", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StateOrProvince", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StateOrProvince", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PostalCode", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PostalCode", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Major", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Major", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.InsertCommand.Connection = Me.Connection
            Me.m_adapter.InsertCommand.CommandText = "INSERT INTO `Students` (`FirstName`, `LastName`, `Address`, `City`, `StateOrProvi"& _ 
                "nce`, `PostalCode`, `PhoneNumber`, `Major`, `StudentNumber`) VALUES (?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?)"
            Me.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FirstName", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LastName", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Address", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "City", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StateOrProvince", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PostalCode", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Major", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.UpdateCommand.Connection = Me.Connection
            Me.m_adapter.UpdateCommand.CommandText = "UPDATE `Students` SET `FirstName` = ?, `LastName` = ?, `Address` = ?, `City` = ?,"& _ 
                " `StateOrProvince` = ?, `PostalCode` = ?, `PhoneNumber` = ?, `Major` = ?, `Stude"& _ 
                "ntNumber` = ? WHERE ((`StudentID` = ?) AND ((? = 1 AND `FirstName` IS NULL) OR ("& _ 
                "`FirstName` = ?)) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?)) AND ("& _ 
                "(? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL"& _ 
                ") OR (`City` = ?)) AND ((? = 1 AND `StateOrProvince` IS NULL) OR (`StateOrProvin"& _ 
                "ce` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? ="& _ 
                " 1 AND `PhoneNumber` IS NULL) OR (`PhoneNumber` = ?)) AND ((? = 1 AND `Major` IS"& _ 
                " NULL) OR (`Major` = ?)) AND ((? = 1 AND `StudentNumber` IS NULL) OR (`StudentNu"& _ 
                "mber` = ?)))"
            Me.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FirstName", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LastName", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Address", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "City", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StateOrProvince", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PostalCode", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Major", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FirstName", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FirstName", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LastName", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LastName", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Address", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Address", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "City", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "City", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StateOrProvince", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StateOrProvince", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PostalCode", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p22", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PostalCode", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p23", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p24", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PhoneNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p25", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Major", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p26", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Major", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p27", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p28", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentNumber", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        Private Sub InitConnection()
            Me.m_connection = New System.Data.OleDb.OleDbConnection
            Me.m_connection.ConnectionString = DataGridView_Sample.Settings.Default.StudentsConnectionString
        End Sub
        
        Private Sub InitCommandCollection()
            Me.m_commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me.m_commandCollection(0).Connection = Me.Connection
            Me.m_commandCollection(0).CommandText = "SELECT StudentID, FirstName, LastName, Address, City, StateOrProvince, PostalCode"& _ 
                ", PhoneNumber, Major, StudentNumber FROM Students"
            Me.m_commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StudentsDataSet.StudentsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.m_clearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As StudentsDataSet.StudentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StudentsDataSet.StudentsDataTable = New StudentsDataSet.StudentsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataTable As StudentsDataSet.StudentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataSet As StudentsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Students")
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Integer, ByVal p3 As String, ByVal p5 As String, ByVal p7 As String, ByVal p9 As String, ByVal p11 As String, ByVal p13 As String, ByVal p15 As String, ByVal p17 As String, ByVal p19 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
            If (p3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p17 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p19 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(p19,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            Me.Adapter.DeleteCommand.Connection.Open
            Try 
                Return Me.Adapter.DeleteCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            Me.Adapter.InsertCommand.Connection.Open
            Try 
                Return Me.Adapter.InsertCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As Integer,  _
                    ByVal p12 As String,  _
                    ByVal p14 As String,  _
                    ByVal p16 As String,  _
                    ByVal p18 As String,  _
                    ByVal p20 As String,  _
                    ByVal p22 As String,  _
                    ByVal p24 As String,  _
                    ByVal p26 As String,  _
                    ByVal p28 As String) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,Integer)
            If (p12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p18 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p20 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p24 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p24,String)
            End If
            If (p26 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(p26,String)
            End If
            If (p28 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(p28,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            Me.Adapter.UpdateCommand.Connection.Open
            Try 
                Return Me.Adapter.UpdateCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Students_And_ClassesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private m_connection As System.Data.OleDb.OleDbConnection
        
        Private m_commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private m_clearBeforeFill As Boolean
        
        Public Sub New()
            MyBase.New
            Me.m_clearBeforeFill = true
        End Sub
        
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me.m_adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me.m_adapter
            End Get
        End Property
        
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me.m_connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me.m_connection
            End Get
            Set
                Me.m_connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me.m_commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me.m_commandCollection
            End Get
        End Property
        
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me.m_clearBeforeFill
            End Get
            Set
                Me.m_clearBeforeFill = value
            End Set
        End Property
        
        Private Sub InitAdapter()
            Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Students And Classes"
            tableMapping.ColumnMappings.Add("StudentClassID", "StudentClassID")
            tableMapping.ColumnMappings.Add("ClassID", "ClassID")
            tableMapping.ColumnMappings.Add("StudentID", "StudentID")
            tableMapping.ColumnMappings.Add("Grade", "Grade")
            Me.m_adapter.TableMappings.Add(tableMapping)
            Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.DeleteCommand.Connection = Me.Connection
            Me.m_adapter.DeleteCommand.CommandText = "DELETE FROM `Students And Classes` WHERE ((`StudentClassID` = ?) AND ((? = 1 AND "& _ 
                "`ClassID` IS NULL) OR (`ClassID` = ?)) AND ((? = 1 AND `StudentID` IS NULL) OR ("& _ 
                "`StudentID` = ?)) AND ((? = 1 AND `Grade` IS NULL) OR (`Grade` = ?)))"
            Me.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentClassID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Grade", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Grade", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.InsertCommand.Connection = Me.Connection
            Me.m_adapter.InsertCommand.CommandText = "INSERT INTO `Students And Classes` (`ClassID`, `StudentID`, `Grade`) VALUES (?, ?"& _ 
                ", ?)"
            Me.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Grade", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.UpdateCommand.Connection = Me.Connection
            Me.m_adapter.UpdateCommand.CommandText = "UPDATE `Students And Classes` SET `ClassID` = ?, `StudentID` = ?, `Grade` = ? WHE"& _ 
                "RE ((`StudentClassID` = ?) AND ((? = 1 AND `ClassID` IS NULL) OR (`ClassID` = ?)"& _ 
                ") AND ((? = 1 AND `StudentID` IS NULL) OR (`StudentID` = ?)) AND ((? = 1 AND `Gr"& _ 
                "ade` IS NULL) OR (`Grade` = ?)))"
            Me.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Grade", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentClassID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClassID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "StudentID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Grade", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Grade", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        Private Sub InitConnection()
            Me.m_connection = New System.Data.OleDb.OleDbConnection
            Me.m_connection.ConnectionString = DataGridView_Sample.Settings.Default.StudentsConnectionString
        End Sub
        
        Private Sub InitCommandCollection()
            Me.m_commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me.m_commandCollection(0).Connection = Me.Connection
            Me.m_commandCollection(0).CommandText = "SELECT StudentClassID, ClassID, StudentID, Grade FROM [Students And Classes]"
            Me.m_commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StudentsDataSet.Students_And_ClassesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.m_clearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As StudentsDataSet.Students_And_ClassesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StudentsDataSet.Students_And_ClassesDataTable = New StudentsDataSet.Students_And_ClassesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataTable As StudentsDataSet.Students_And_ClassesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataSet As StudentsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Students And Classes")
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Integer, ByVal p3 As Integer, ByVal p5 As System.Nullable(Of Integer), ByVal p7 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,Integer)
            If (p5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            Me.Adapter.DeleteCommand.Connection.Open
            Try 
                Return Me.Adapter.DeleteCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As Integer, ByVal p2 As System.Nullable(Of Integer), ByVal p3 As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,Integer)
            If (p2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            Me.Adapter.InsertCommand.Connection.Open
            Try 
                Return Me.Adapter.InsertCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As Integer, ByVal p2 As System.Nullable(Of Integer), ByVal p3 As String, ByVal p4 As Integer, ByVal p6 As Integer, ByVal p8 As System.Nullable(Of Integer), ByVal p10 As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,Integer)
            If (p2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,Integer)
            If (p8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            Me.Adapter.UpdateCommand.Connection.Open
            Try 
                Return Me.Adapter.UpdateCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Switchboard_ItemsTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private m_connection As System.Data.OleDb.OleDbConnection
        
        Private m_commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private m_clearBeforeFill As Boolean
        
        Public Sub New()
            MyBase.New
            Me.m_clearBeforeFill = true
        End Sub
        
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me.m_adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me.m_adapter
            End Get
        End Property
        
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me.m_connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me.m_connection
            End Get
            Set
                Me.m_connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me.m_commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me.m_commandCollection
            End Get
        End Property
        
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me.m_clearBeforeFill
            End Get
            Set
                Me.m_clearBeforeFill = value
            End Set
        End Property
        
        Private Sub InitAdapter()
            Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Switchboard Items"
            tableMapping.ColumnMappings.Add("SwitchboardID", "SwitchboardID")
            tableMapping.ColumnMappings.Add("ItemNumber", "ItemNumber")
            tableMapping.ColumnMappings.Add("ItemText", "ItemText")
            tableMapping.ColumnMappings.Add("Command", "Command")
            tableMapping.ColumnMappings.Add("Argument", "Argument")
            Me.m_adapter.TableMappings.Add(tableMapping)
            Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.DeleteCommand.Connection = Me.Connection
            Me.m_adapter.DeleteCommand.CommandText = "DELETE FROM `Switchboard Items` WHERE ((`SwitchboardID` = ?) AND (`ItemNumber` = "& _ 
                "?) AND ((? = 1 AND `ItemText` IS NULL) OR (`ItemText` = ?)) AND ((? = 1 AND `Com"& _ 
                "mand` IS NULL) OR (`Command` = ?)) AND ((? = 1 AND `Argument` IS NULL) OR (`Argu"& _ 
                "ment` = ?)))"
            Me.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SwitchboardID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ItemNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ItemText", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ItemText", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Command", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Command", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Argument", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Argument", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.InsertCommand.Connection = Me.Connection
            Me.m_adapter.InsertCommand.CommandText = "INSERT INTO `Switchboard Items` (`SwitchboardID`, `ItemNumber`, `ItemText`, `Comm"& _ 
                "and`, `Argument`) VALUES (?, ?, ?, ?, ?)"
            Me.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SwitchboardID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ItemNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ItemText", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Command", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Argument", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me.m_adapter.UpdateCommand.Connection = Me.Connection
            Me.m_adapter.UpdateCommand.CommandText = "UPDATE `Switchboard Items` SET `SwitchboardID` = ?, `ItemNumber` = ?, `ItemText` "& _ 
                "= ?, `Command` = ?, `Argument` = ? WHERE ((`SwitchboardID` = ?) AND (`ItemNumber"& _ 
                "` = ?) AND ((? = 1 AND `ItemText` IS NULL) OR (`ItemText` = ?)) AND ((? = 1 AND "& _ 
                "`Command` IS NULL) OR (`Command` = ?)) AND ((? = 1 AND `Argument` IS NULL) OR (`"& _ 
                "Argument` = ?)))"
            Me.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SwitchboardID", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ItemNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ItemText", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Command", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Argument", System.Data.DataRowVersion.Current, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SwitchboardID", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ItemNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ItemText", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ItemText", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Command", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Command", System.Data.DataRowVersion.Original, false, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Argument", System.Data.DataRowVersion.Original, true, Nothing))
            Me.m_adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Argument", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        Private Sub InitConnection()
            Me.m_connection = New System.Data.OleDb.OleDbConnection
            Me.m_connection.ConnectionString = DataGridView_Sample.Settings.Default.StudentsConnectionString
        End Sub
        
        Private Sub InitCommandCollection()
            Me.m_commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me.m_commandCollection(0).Connection = Me.Connection
            Me.m_commandCollection(0).CommandText = "SELECT SwitchboardID, ItemNumber, ItemText, Command, Argument FROM [Switchboard I"& _ 
                "tems]"
            Me.m_commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As StudentsDataSet.Switchboard_ItemsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.m_clearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As StudentsDataSet.Switchboard_ItemsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As StudentsDataSet.Switchboard_ItemsDataTable = New StudentsDataSet.Switchboard_ItemsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataTable As StudentsDataSet.Switchboard_ItemsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataSet As StudentsDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Switchboard Items")
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As System.Nullable(Of Integer), ByVal p2 As System.Nullable(Of Short), ByVal p4 As String, ByVal p6 As System.Nullable(Of Short), ByVal p8 As String) As Integer
            If (p1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Integer)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Integer)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(p8,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            Me.Adapter.DeleteCommand.Connection.Open
            Try 
                Return Me.Adapter.DeleteCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As System.Nullable(Of Integer), ByVal p2 As System.Nullable(Of Short), ByVal p3 As String, ByVal p4 As System.Nullable(Of Short), ByVal p5 As String) As Integer
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            Me.Adapter.InsertCommand.Connection.Open
            Try 
                Return Me.Adapter.InsertCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As System.Nullable(Of Integer), ByVal p2 As System.Nullable(Of Short), ByVal p3 As String, ByVal p4 As System.Nullable(Of Short), ByVal p5 As String, ByVal p6 As System.Nullable(Of Integer), ByVal p7 As System.Nullable(Of Short), ByVal p9 As String, ByVal p11 As System.Nullable(Of Short), ByVal p13 As String) As Integer
            If (p1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Integer)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Integer)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            Me.Adapter.UpdateCommand.Connection.Open
            Try 
                Return Me.Adapter.UpdateCommand.ExecuteNonQuery
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
